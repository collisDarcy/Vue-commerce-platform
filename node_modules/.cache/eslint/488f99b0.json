[{"D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\main-prod.js":"1","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\App.vue":"2","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\router\\router.js":"3","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\IndexV.vue":"4","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\FirstPage.vue":"5","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\power\\RightV.vue":"6","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\LoginV.vue":"7","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\user\\userV.vue":"8","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\ParamsV.vue":"9","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\order\\OrderV.vue":"10","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\CateV.vue":"11","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\report\\ReportV.vue":"12","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\power\\RolesV.vue":"13","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\goods_List.vue":"14","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\AddV.vue":"15","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\order\\citydata.js":"16"},{"size":2257,"mtime":1648446879554,"results":"17","hashOfConfig":"18"},{"size":276,"mtime":1647912294444,"results":"19","hashOfConfig":"18"},{"size":2173,"mtime":1648428557449,"results":"20","hashOfConfig":"18"},{"size":5336,"mtime":1648120882211,"results":"21","hashOfConfig":"18"},{"size":3263,"mtime":1648040621395,"results":"22","hashOfConfig":"18"},{"size":2363,"mtime":1648429526058,"results":"23","hashOfConfig":"18"},{"size":15249,"mtime":1648257373916,"results":"24","hashOfConfig":"18"},{"size":18262,"mtime":1648120882217,"results":"25","hashOfConfig":"18"},{"size":16136,"mtime":1648353074782,"results":"26","hashOfConfig":"18"},{"size":6127,"mtime":1648428557441,"results":"27","hashOfConfig":"18"},{"size":8553,"mtime":1648257373917,"results":"28","hashOfConfig":"18"},{"size":2180,"mtime":1648428557441,"results":"29","hashOfConfig":"18"},{"size":9389,"mtime":1648120882216,"results":"30","hashOfConfig":"18"},{"size":5085,"mtime":1648353074783,"results":"31","hashOfConfig":"18"},{"size":12666,"mtime":1648353074781,"results":"32","hashOfConfig":"18"},{"size":305248,"mtime":1648426789298,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dj0u3d",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\main-prod.js",[],"D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\App.vue",[],"D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\router\\router.js",[],"D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\IndexV.vue",["76","77"],"<template>\r\n  <div>\r\n    <!-- <p>这是主界面</p> -->\r\n    <el-container id=\"index-Page\">\r\n      <!-- 头部区域 -->\r\n      <el-header>\r\n        <!-- 图片 -->\r\n        <div><img src=\"../assets/images/2-4.jpg\" alt=\"\" /> <span>后台管理系统</span></div>\r\n\r\n        <!-- 退出按钮 -->\r\n        <el-button type=\"info\" @click=\"goback\">退出登录</el-button>\r\n      </el-header>\r\n      <el-container>\r\n        <!-- 侧边栏 -->\r\n        <!-- 当折叠的时候，侧边栏的宽度会变窄 -->\r\n        <el-aside :width=\"isCollapse ? '64px' : '200px'\">\r\n          <!-- 点击按钮使用菜单栏折叠效果 -->\r\n          <button class=\"toggle\" @click=\"toggleCollapse\">Stretch</button>\r\n          <!-- 侧边栏区域---用户管理 -->\r\n          <el-menu background-color=\"#313743\" text-color=\"#fff\" active-text-color=\"red\" :collapse=\"isCollapse\" :collapse-transition=\"false\" :router=\"true\" unique-opened>\r\n            <!-- 一级菜单 -->\r\n            <el-submenu :index=\"item.id + ''\" v-for=\"item in menuList\" :key=\"item.id\">\r\n              <template slot=\"title\">\r\n                <i :class=\"iconsObj[item.id]\"></i>\r\n                <span>{{ item.authName }}</span>\r\n              </template>\r\n              <!-- 二级菜单 -->\r\n              <!-- 开启路由模式：router=true,启用该模式会在激活导航时以 index 作为 path 进行路由跳转 -->\r\n              <el-menu-item :index=\"'/' + subItem.path\" v-for=\"subItem in item.children\" :key=\"subItem.id\" @click=\"saveState('/' + subItem.path)\" :default-active=\"activePath\">\r\n                <template slot=\"title\">\r\n                  <i class=\"el-icon-menu\"></i>\r\n                  <span>{{ subItem.authName }}</span>\r\n                </template>\r\n              </el-menu-item>\r\n            </el-submenu>\r\n          </el-menu>\r\n        </el-aside>\r\n        <!-- 内容主体区域 -->\r\n        <el-main>\r\n          <router-view></router-view>\r\n        </el-main>\r\n      </el-container>\r\n    </el-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nexport default {\r\n  data() {\r\n    const token = window.sessionStorage.getItem('token')\r\n    console.log(token)\r\n    // console.log(token)\r\n    return {\r\n      //是否折叠\r\n      isCollapse: false,\r\n      // 获取token值\r\n      token: token,\r\n      // 左侧菜单数据\r\n      menuList: [],\r\n      // 菜单图标\r\n      iconsObj: {\r\n        125: 'el-icon-user-solid',\r\n        103: 'el-icon-help',\r\n        101: 'el-icon-s-goods',\r\n        102: 'el-icon-s-order',\r\n        145: 'el-icon-s-tools',\r\n      },\r\n      // 被激活的链接地址\r\n      activePath: '',\r\n    }\r\n  },\r\n  created() {\r\n    this.getMenuList()\r\n    // 当被创建的时候就开始执行\r\n    this.activePath = window.sessionStorage.getItem('activePath')\r\n  },\r\n  methods: {\r\n    goback() {\r\n      // 清空本地存储的token\r\n      window.sessionStorage.clear()\r\n      // 强制跳转到登录页\r\n      this.$router.push('/login')\r\n    },\r\n    toggleCollapse() {\r\n      this.isCollapse = !this.isCollapse\r\n    },\r\n    //获取所有的菜单--方法一\r\n    async getMenuList() {\r\n      const { data: res } = await this.$http.get('menus', {\r\n        headers: { Authorization: this.token },\r\n      })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error(res.meta.msg)\r\n      }\r\n      this.menuList = res.data\r\n      console.log(res)\r\n      // 方法二：\r\n      // await axios\r\n      //   .get('http://127.0.0.1:8888/api/private/v1/menus', {\r\n      //     headers: { Authorization: this.token },\r\n      //   })\r\n      // .then((res) => {\r\n      //   console.log(res)\r\n      //   if (res.meta.status !== 200) return this.$message.error(res.meta.msg)\r\n      //   this.menuList = res.data\r\n      //   console.log(res)\r\n      // })\r\n    },\r\n    // 定义二级菜单的激活状态\r\n    saveState(activePath) {\r\n      window.sessionStorage.setItem('activePath', activePath)\r\n      this.activePath = activePath\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n#index-Page {\r\n  height: 1800px;\r\n  border: 1px solid cyan;\r\n  background-color: red;\r\n}\r\n// .el-container {\r\n//   height: 100%;\r\n//   border: 1px solid cyan;\r\n// }\r\n.el-header {\r\n  background-color: #313743;\r\n  border: 1px solid #313743;\r\n  box-shadow: 0 0 10px cyan;\r\n  height: 100px !important;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding-left: 0px;\r\n  // align-items: center;\r\n  color: #000000;\r\n  font-size: 20px;\r\n  font-family: cursive;\r\n  > div {\r\n    display: flex;\r\n    align-items: center;\r\n    span {\r\n      margin-left: 15px;\r\n    }\r\n    img {\r\n      height: 100%;\r\n      border: 1px dotted #438884;\r\n      border-radius: 10px;\r\n      box-shadow: 0 0 30px #438884;\r\n    }\r\n  }\r\n  .el-button--info {\r\n    background-color: gray;\r\n    height: 50%;\r\n    // margin: 0 auto;\r\n    margin-top: 25px;\r\n  }\r\n}\r\n.el-aside {\r\n  // position: fixed;\r\n  background-color: #313743;\r\n  // height: 100%;\r\n  .el-menu {\r\n    border-right: none;\r\n  }\r\n}\r\n.el-main {\r\n  background-color: #eaedf1;\r\n}\r\n.toggle {\r\n  background-color: gray;\r\n  width: 100%;\r\n  font-size: 18px;\r\n  line-height: 18px;\r\n  color: #fff;\r\n  text-align: center;\r\n  // letter-spacing: 0.2em; // 增加或减少字符之间的空白\r\n  cursor: pointer;\r\n}\r\n/deep/.el-icon-user-solid {\r\n  margin-right: 20px;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\FirstPage.vue",[],"D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\power\\RightV.vue",["78"],"<template>\r\n  <div>\r\n    <!-- 面包屑导航区域 -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item>\r\n      <el-breadcrumb-item>权限管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>权限列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <el-table :data=\"rightsList\" border stripe>\r\n        <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n        <el-table-column label=\"权限名称\" prop=\"authName\"></el-table-column>\r\n        <el-table-column label=\"路径\" prop=\"path\"></el-table-column>\r\n        <el-table-column label=\"权限等级\" prop=\"level\">\r\n          <!-- 这里使用插槽--放内容 -->\r\n          <template slot-scope=\"scope\">\r\n            <el-tag v-if=\"scope.row.level === '0'\">一级</el-tag>\r\n            <el-tag type=\"success\" v-else-if=\"scope.row.level === '1'\">二级</el-tag>\r\n            <el-tag type=\"danger\" v-else>三级</el-tag>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nexport default {\r\n  data() {\r\n    // 获取存储到本地的token\r\n    const token = window.sessionStorage.getItem('token')\r\n    return {\r\n      // 权限列表\r\n      rightsList: [],\r\n      token: token,\r\n    }\r\n  },\r\n  created() {\r\n    // 获取所有的权限\r\n    this.getRightsList()\r\n  },\r\n  methods: {\r\n    async getRightsList() {\r\n      //获取所有权限的数据\r\n      const { data: res } = await this.$http.get('rights/list', { headers: { Authorization: this.token } })\r\n      if (res.meta.status !== 200) {\r\n        console.log(res)\r\n        return this.$message.error({\r\n          message: '获取权限列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取权限列表成功！',\r\n        center: true,\r\n      })\r\n      this.rightsList = res.data\r\n      // 打印所有的权限列表\r\n      // console.log(this.rightsList)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\LoginV.vue",["79","80","81","82"],"<template>\r\n  <div>\r\n    <div id=\"login-box\">\r\n      <!-- 图像区域 -->\r\n      <div class=\"login-head\">\r\n        <img src=\"../assets/images/1-3.gif\" alt=\"\" />\r\n      </div>\r\n      <!-- 表单区域 -->\r\n      <el-form label-width=\"83px\" class=\"fm\" :model=\"loginForm\" status-icon :rules=\"rules\" ref=\"loginForm\" @submit.prevent.native=\"Login\">\r\n        <!-- 用户名 -->\r\n        <el-form-item label=\"用户名:\" prop=\"username\" class=\"item\">\r\n          <el-input prefix-icon=\"el-icon-user-solid\" v-model=\"loginForm.username\"></el-input>\r\n        </el-form-item>\r\n        <!-- 密码 -->\r\n        <el-form-item label=\"用户密码:\" class=\"psd\" prop=\"password\">\r\n          <el-input type=\"password\" prefix-icon=\"el-icon-lock\" show-password v-model=\"loginForm.password\" autocomplete=\"off\" @keydown.enter.native=\"Login\"></el-input>\r\n        </el-form-item>\r\n        <!-- 确认密码\r\n        <el-form-item label=\"确认密码:\" prop=\"checkPassword\">\r\n          <el-input\r\n            type=\"passwordword\"\r\n            prefix-icon=\"el-icon-lock\"\r\n            show-passwordword\r\n            v-model=\"loginForm.checkPassword\"\r\n            autocomplete=\"off\"\r\n          ></el-input>\r\n        </el-form-item> -->\r\n        <!-- 按钮区域 -->\r\n        <el-form-item class=\"btn\">\r\n          <el-button type=\"primary\" plain class=\"btn1\" @click=\"Login\">登录</el-button>\r\n          <el-button type=\"primary\" plain class=\"btn2\" @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div class=\"sign\">Don't have an account?<button @click=\"showR\" class=\"signup\">Sign up</button></div>\r\n    </div>\r\n    <!-- 背景模块 -->\r\n    <div id=\"forPop\"></div>\r\n    <!-- // 点击显示注册弹窗 -->\r\n    <div v-if=\"showRegister\" class=\"registerPart\">\r\n      <!-- 头部部分 -->\r\n      <div class=\"head\">\r\n        <img src=\"../assets/images/02.png\" />\r\n        <p align=\"center\">Sign up to Vue</p>\r\n        <button @click=\"shutdown\" id=\"shutdown\">关闭</button>\r\n      </div>\r\n      <!-- 表单区域 -->\r\n      <div class=\"centent\">\r\n        <el-form :model=\"reguserForm\" status-icon :rules=\"reguserRules\" ref=\"reguserForm\" @submit.prevent.native=\"reguser\">\r\n          <!-- 用户名 -->\r\n          <div id=\"name\">Username --♥♥♥</div>\r\n          <el-form-item prop=\"username\">\r\n            <el-input prefix-icon=\"el-icon-user-solid\" v-model=\"reguserForm.username\" class=\"cen-ipt\"></el-input>\r\n          </el-form-item>\r\n          <!-- 密码 -->\r\n          <div id=\"cen-psd\">Password --♥♥♥</div>\r\n          <el-form-item prop=\"password\">\r\n            <el-input type=\"password\" prefix-icon=\"el-icon-lock\" show-password v-model=\"reguserForm.password\" autocomplete=\"off\" class=\"ipt-psd\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item class=\"btn\">\r\n            <el-button type=\"primary\" plain class=\"regBtn\" @click=\"reguser\">Sign up</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n        <!-- 励志名言 -->\r\n        <div class=\"word\">The only way to become excellent is to be endlessly fascinated by doing the same thing over and over.You have to fall in love with boredom.</div>\r\n        <!-- 底部图片 -->\r\n        <!-- 结尾-start -->\r\n        <div class=\"banner\">\r\n          <div class=\"left\">\r\n            <img src=\"../assets/images/1-5.gif\" />\r\n          </div>\r\n          <div class=\"right\">\r\n            <img src=\"../assets/images/1-6.gif\" />\r\n          </div>\r\n        </div>\r\n        <!-- 结尾-end -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nexport default {\r\n  name: 'LoginV',\r\n  data() {\r\n    // 获取当前的token值\r\n    const token = window.sessionStorage.getItem('token')\r\n    // 登录用户名不能为空\r\n    const validataUsername = (rule, value, callback) => {\r\n      if (value.trim().length < 1) {\r\n        // callback(new Error('用户名不能为空！-------------'))\r\n        this.$message.error({\r\n          message: '用户名不能为空!',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    // 登录密码不能为空\r\n    const validatePassword = (rule, value, callback) => {\r\n      if (value.trim().length < 1) {\r\n        // callback(new Error('密码不能为空！'))\r\n        this.$message.error({\r\n          message: '密码不能为空!',\r\n          center: true,\r\n          duration: 1000,\r\n        })\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    // 注册用户名不能为空\r\n    const validataUsername1 = (rule, value, callback) => {\r\n      if (value.trim().length < 1) {\r\n        callback(new Error('The username cannot be empty!'))\r\n        this.$message.error({\r\n          message: 'The usename cannot be empty!',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    // 注册密码不能为空\r\n    const validataPassword1 = (rule, value, callback) => {\r\n      if (value.trim().length < 1) {\r\n        callback(new Error('The Password cannot be empty!'))\r\n        this.$message.error({\r\n          message: 'The Password cannot be empty!',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    return {\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n        // checkPassword: \"\",\r\n      },\r\n      // 注册对象\r\n      reguserForm: {\r\n        username: '',\r\n        password: '',\r\n      },\r\n      token: token,\r\n      // 验证规则对象\r\n      rules: {\r\n        password: [\r\n          { validator: validatePassword, trigger: 'blur', required: true },\r\n          { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n        ],\r\n        // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\r\n        username: [\r\n          { validator: validataUsername, required: true, trigger: 'blur' },\r\n          { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n        ],\r\n      },\r\n      // 注册规则对象\r\n      reguserRules: {\r\n        password: [\r\n          { validator: validataPassword1, trigger: 'blur', required: true },\r\n          { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n        ],\r\n        // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\r\n        username: [\r\n          { validator: validataUsername1, required: true, trigger: 'blur' },\r\n          { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n        ],\r\n      },\r\n      showRegister: false,\r\n    }\r\n  },\r\n  methods: {\r\n    // 用户登录函数，发送post请求给客户端\r\n    Login() {\r\n      this.$refs.loginForm.validate(async (valid) => {\r\n        if (!valid) return\r\n        // 解构赋值，返回值为promised,可以使用await和async\r\n        //1:----最好用这种---但是我真的不想删除我想的(虽然它很鸡肋)\r\n        const { data: res } = await this.$http.post('login', this.loginForm)\r\n        if (res.meta.status === 200) {\r\n          this.$message.success({\r\n            message: '登录成功！',\r\n            center: true,\r\n            duration: 3000,\r\n          })\r\n          // console.log(res.token)\r\n          window.sessionStorage.setItem('token', res.data.token)\r\n          console.log(res.data.token)\r\n          this.$router.push('/index')\r\n          this.$refs.loginForm.resetFields()\r\n        }\r\n        // 二\r\n        // const { data: res } = await this.$http.post('/api/login', this.loginForm)\r\n        // if (res.status === 0) {\r\n        //   //  alert('登录成功!')\r\n        //   this.$message.success({\r\n        //     message: '登录成功!',\r\n        //     center: true,\r\n        //     duration: 1000,\r\n        //   })\r\n        // console.log(res)\r\n        // 登录成功之后的token保存到客户端的sessionStorage中\r\n        // 项目中出现了其它API的接口，必须在登录之后才能访问\r\n        // token只在当前网站打开期间生效，token保存到sessionStorage中\r\n        // expiresIn:'10h'\r\n        // window.sessionStorage.setItem('token', res.token)\r\n        // this.$router.push('/index')\r\n        // // 登录成功之后，跳转到别的页面，然后清空数据\r\n        // this.$refs.loginForm.resetFields()\r\n        else {\r\n          // alert(res.message)\r\n          this.$message.error({\r\n            message: res.meta.msg,\r\n            // message: res.message,\r\n            center: true,\r\n          })\r\n          console.log(res)\r\n        }\r\n      })\r\n    },\r\n    // 点击重置按钮，重置登录表单\r\n    resetForm() {\r\n      this.$refs.loginForm.resetFields()\r\n    },\r\n    showR() {\r\n      document.getElementById('forPop').style.display = 'block'\r\n      this.showRegister = true\r\n    },\r\n    shutdown() {\r\n      // 关闭背景模块\r\n      document.getElementById('forPop').style.display = 'none'\r\n      // 关闭注册框\r\n      this.showRegister = false\r\n      // 关闭注册框--清空里面的数据\r\n      this.$refs.reguserForm.resetFields()\r\n    },\r\n    // 注册界面\r\n    reguser() {\r\n      this.$refs.reguserForm.validate(async (valid) => {\r\n        if (!valid) return\r\n\r\n        //这是自己写的一种方法--无奈只能弃掉--虽痛心不忍！！！！\r\n        const { data: res } = await this.$http.post('/api/reguser', this.reguserForm)\r\n        console.log(res)\r\n        if (res.status === 0) {\r\n          this.$message.success({\r\n            message: '注册成功！',\r\n            center: true,\r\n            duration: 3000,\r\n          })\r\n          //   console.log(res)\r\n          // 这是第二种---不推荐使用--鸡肋\r\n          // const { data: res } = await axios.post('http://127.0.0.1:8888/api/private/v1/users', this.reguserForm, { headers: { Authorization: this.token } })\r\n          // if (res.meta.status !== 201) {\r\n          //   console.log(res)\r\n          //   return this.$message.error('注册失败！')\r\n          // }\r\n          // alert('注册成功！')\r\n          //注册成功，清空登录框中的数据\r\n          this.$refs.reguserForm.resetFields()\r\n          // 关闭注册弹窗\r\n          document.getElementById('forPop').style.display = 'none'\r\n          this.showRegister = false\r\n        } else {\r\n          console.log(res.message)\r\n          this.$message.error({\r\n            message: res.message,\r\n            duration: 3000,\r\n          })\r\n        }\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n#login-box {\r\n  width: 350px;\r\n  height: 250px;\r\n  background-color: #760102;\r\n  box-shadow: 0 0 10px #feb530;\r\n  border-radius: 10px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  // 移动transform\r\n  transform: translate(-50%, -50%);\r\n  .login-head {\r\n    position: absolute;\r\n    width: 100px;\r\n    height: 100px;\r\n    border: 2px solid #760102;\r\n    border-radius: 50%;\r\n    // margin-left: 120px;\r\n    // 将盒子居中显示\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    box-shadow: 0 0 30px #feb530;\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      // background-color:#2b3b6b;\r\n    }\r\n  }\r\n  // 表单样式\r\n  .el-form {\r\n    //  width: 60%;\r\n    margin-top: 81px;\r\n    border: 1px solid red;\r\n    border-bottom: none;\r\n    // 透明度\r\n    opacity: 0.91;\r\n    // 放大，缩小陪数\r\n    transform: scale(0.75, 0.75);\r\n    box-sizing: border-box;\r\n    box-shadow: 0 0 20px #feb530;\r\n  }\r\n  /deep/.el-form-item__label {\r\n    font-family: kaiti;\r\n    font-size: 13px;\r\n    color: cyan;\r\n  }\r\n  .btn {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  .btn1 {\r\n    // display: flex;;\r\n    flex: 1;\r\n    // padding-right: 30px;\r\n    // justify-content: flex-end;\r\n    margin-right: 50px;\r\n    font-size: 17px;\r\n    font-family: kaiti;\r\n    color: #760102;\r\n    border-radius: 10px;\r\n    box-shadow: #feb530;\r\n    background-color: #ff9933;\r\n  }\r\n  .btn2 {\r\n    flex: 1;\r\n    margin-right: 50px;\r\n    font-size: 17px;\r\n    font-family: kaiti;\r\n    color: #760102;\r\n    // opacity: 0.7\r\n    border-radius: 10px;\r\n    box-shadow: #feb530;\r\n    background-color: #161b22;\r\n  }\r\n  .sign {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    margin-bottom: 0px;\r\n    margin-left: 59px;\r\n    font-family: cursive;\r\n    .signup {\r\n      font-size: 16px;\r\n      border-radius: 10px;\r\n      margin-left: 7px;\r\n      background-color: rgba(255, 255, 255, 0.2);\r\n    }\r\n  }\r\n}\r\n// 弹出框中的信息模块\r\n.registerPart {\r\n  position: absolute;\r\n  width: 350px;\r\n  height: 600px;\r\n  top: 50%;\r\n  right: 0;\r\n  opacity: 0.91;\r\n  margin-top: -321px;\r\n  margin-right: 74px;\r\n  background-color: #760102;\r\n  box-shadow: 0 0 10px #feb530;\r\n  border: 1px solid red;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0 0 20px #feb530;\r\n  transform: scale(0.85, 0.85);\r\n  .head {\r\n    width: 150px;\r\n    height: 150px;\r\n    // border: 1px solid blue;\r\n    left: 50%;\r\n    transform: translate(65%);\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    p {\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      margin-top: -19px;\r\n    }\r\n    #shutdown {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      font-size: 18px;\r\n      font-family: kaiti;\r\n      color: #760102;\r\n      margin-right: -100px;\r\n    }\r\n  }\r\n  .centent {\r\n    // position: relative;\r\n    width: 100%;\r\n    height: 300px;\r\n    margin-top: 20px;\r\n    background-color: #161b22;\r\n    #name {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      margin-top: 170px;\r\n    }\r\n    #cen-psd {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      margin-top: 249px;\r\n    }\r\n    .cen-ipt {\r\n      margin-top: 30px;\r\n    }\r\n    .ipt-psd {\r\n      margin-top: 18px;\r\n    }\r\n    .regBtn {\r\n      width: 100%;\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      text-align: center;\r\n      line-height: 20px;\r\n      background-color: #238636;\r\n    }\r\n    // 文字格言\r\n    .word {\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n    }\r\n    .banner {\r\n      display: flex;\r\n      height: 193px;\r\n      // transform: scale(0.6);\r\n      // margin-top: 5px;\r\n      border: 1px solid red;\r\n      justify-content: space-around;\r\n      .left {\r\n        flex: 1;\r\n        // width: 50%;\r\n        border: 1px solid yellow;\r\n        padding-left: -50px;\r\n        // transform: scale(0.6);\r\n        img {\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n      }\r\n      .right {\r\n        flex: 1;\r\n        // width: 50%;\r\n        border: 1px solid blue;\r\n        img {\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// 背景模块\r\n#forPop {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  opacity: 0.4;\r\n  background-color: #888888;\r\n  display: none;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\user\\userV.vue",["83","84"],"<template>\r\n  <div>\r\n    <!-- <p>这是user页面</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 搜索框，按钮区域 -->\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"7\">\r\n          <!-- input输入框区域 -->\r\n          <el-input placeholder=\"请输入内容\" v-model=\"queryInfo.query\" clearable @clear=\"getUserList\">\r\n            <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"getUserList\"></el-button>\r\n          </el-input>\r\n        </el-col>\r\n        <el-col :span=\"7\">\r\n          <el-button type=\"primary\" @click=\"addDialogVisible = true\">添加用户</el-button>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- 用户列表区域 -->\r\n      <el-table :data=\"userList\" border stripe>\r\n        <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n        <el-table-column label=\"姓名\" prop=\"username\"></el-table-column>\r\n        <el-table-column label=\"邮箱\" prop=\"email\"></el-table-column>\r\n        <el-table-column label=\"电话\" prop=\"mobile\"></el-table-column>\r\n        <el-table-column label=\"身份\" prop=\"role_name\"></el-table-column>\r\n        <el-table-column label=\"状态\">\r\n          <template slot-scope=\"scope\">\r\n            <el-switch v-model=\"scope.row.mg_state\" active-color=\"#13ce66\" @change=\"userState(scope.row)\"></el-switch>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <!-- 修改按钮 -->\r\n            <el-tooltip effect=\"dark\" content=\"修改\" placement=\"top\" :enterable=\"false\">\r\n              <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"showEditDialog(scope.row.id)\"></el-button>\r\n            </el-tooltip>\r\n\r\n            <!-- 删除按钮 -->\r\n            <el-tooltip effect=\"dark\" content=\"删除\" placement=\"top\" :enterable=\"false\">\r\n              <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeUserById(scope.row.id)\"></el-button>\r\n            </el-tooltip>\r\n\r\n            <!-- 分配角色按钮 -->\r\n            <el-tooltip effect=\"dark\" content=\"分配角色\" placement=\"top\" :enterable=\"false\">\r\n              <el-button type=\"warning\" icon=\"el-icon-setting\" size=\"mini\" @click=\"setRole(scope.row)\"></el-button>\r\n            </el-tooltip>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <!-- 分页区域 -->\r\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"queryInfo.pagenum\" :page-sizes=\"[1, 5, 10, 15]\" :page-size=\"queryInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\"> </el-pagination>\r\n    </el-card>\r\n    <!-- 添加用户的对话框 -->\r\n    <el-dialog title=\"添加用户\" :visible.sync=\"addDialogVisible\" width=\"30%\" @close=\"addDialogClosed\">\r\n      <!-- 内容主题区域 -->\r\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"70px\">\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"addForm.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input v-model=\"addForm.password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"email\" label=\"邮箱\">\r\n          <el-input v-model=\"addForm.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"手机号\" prop=\"mobile\">\r\n          <el-input v-model=\"addForm.mobile\" maxlength=\"11\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <!-- 底部区域 -->\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addUser\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n    <!-- 修改用户信息的对话框 -->\r\n    <el-dialog title=\"修改用户\" :visible.sync=\"editDialogVisible\" width=\"30%\" @close=\"editDialogClosed\">\r\n      <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"70px\">\r\n        <el-form-item label=\"用户名\">\r\n          <el-input v-model=\"editForm.username\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\" prop=\"email\">\r\n          <el-input v-model=\"editForm.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"手机号\" prop=\"mobile\">\r\n          <el-input v-model=\"editForm.mobile\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"editUserInfo\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n    <!-- 分配角色的对话框 -->\r\n    <el-dialog title=\"分配角色\" :visible.sync=\"setRoleDialogVisible\" width=\"30%\" @close=\"setRoleDialogClosed\">\r\n      <!-- 分配角色对话框的区域 -->\r\n      <el-form :label-position=\"labelPostion\" label-width=\"50px\">\r\n        <el-form-item label=\"用户名:\">\r\n          <el-input v-model=\"userinfo.username\" disabled></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"角色名:\">\r\n          <el-input v-model=\"userinfo.role_name\" disabled></el-input>\r\n        </el-form-item>\r\n        <!-- 下拉菜单区域 -->\r\n        <el-form-item label=\"分配角色:\">\r\n          <el-select v-model=\"selectedRoleId\" placeholder=\"请选择\">\r\n            <el-option v-for=\"item in rolesList\" :key=\"item.id\" :label=\"item.roleName\" :value=\"item.id\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"setRoleDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"saveRoleInfo\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nexport default {\r\n  data() {\r\n    const token = window.sessionStorage.getItem('token')\r\n    // 验证邮箱的规则\r\n    // const checkEmail = (rule, value, callback) => {\r\n    //   //验证邮箱的正则表达式\r\n    //   const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/\r\n    //   if (regEmail.test(value)) {\r\n    //     return callback()\r\n    //   }\r\n    //   callback(\r\n    //     this.$message.error({\r\n    //       message: '请输入合法的邮箱',\r\n    //       center: true,\r\n    //       duration: 3000,\r\n    //     })\r\n    //   )\r\n    // }\r\n    // 验证手机号的规则\r\n    const checkMobile = (rule, value, callback) => {\r\n      const regMobile = /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$/\r\n      if (regMobile.test(value)) {\r\n        return callback()\r\n      }\r\n      callback(new Error('请输入合法的手机号码!'))\r\n    }\r\n    return {\r\n      // 获取用户列表的参数对象\r\n      queryInfo: {\r\n        query: '',\r\n        pagenum: 1,\r\n        pagesize: 2, // 每页显示的条数\r\n      },\r\n      token: token,\r\n      // 保存请求回来的用户列表数据\r\n      userList: [],\r\n      total: 0,\r\n      // 控制添加用户对话框的显示与隐藏\r\n      addDialogVisible: false,\r\n      // 控制修改用户对话框的显示与隐藏\r\n      editDialogVisible: false,\r\n      // 控制分配角色对话框的显示与隐藏\r\n      setRoleDialogVisible: false,\r\n      // 需要被分配角色的用户信息\r\n      // 分配角色对属性的位置\r\n      labelPostion: 'top',\r\n      // 获取当前所在行的用户信息\r\n      userinfo: {},\r\n      // 所有角色的数据列表\r\n      rolesList: [],\r\n      // 已经选中角色的Id值\r\n      selectedRoleId: '',\r\n      // 查询到的用户信息对象\r\n      editForm: {\r\n        id: '',\r\n        email: '',\r\n        mobile: '',\r\n      },\r\n      // 修改表单的验证规则对象\r\n      editFormRules: {\r\n        email: [\r\n          { required: true, message: '邮箱不能为空!', trigger: 'blur' },\r\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] },\r\n        ],\r\n        mobile: [\r\n          { required: true, message: '手机号不能为空!', trigger: 'blur' },\r\n          { validator: checkMobile, trigger: 'blur' },\r\n        ],\r\n      },\r\n      // 添加用户的表单数据\r\n      addForm: {\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        mobile: '',\r\n      },\r\n      // 添加用户的验证规则对象\r\n      addFormRules: {\r\n        username: [\r\n          { required: true, message: '用户名不能为空!', trigger: 'blur' },\r\n          {\r\n            min: 3,\r\n            max: 10,\r\n            message: '用户名的长度为3到10位字符之间！',\r\n            trigger: 'blur',\r\n          },\r\n        ],\r\n        password: [\r\n          { required: true, message: '密码不能为空!', trigger: 'blur' },\r\n          {\r\n            min: 3,\r\n            max: 10,\r\n            message: '密码的长度为3到10位字符之间！',\r\n            trigger: 'blur',\r\n          },\r\n        ],\r\n        email: [\r\n          { required: true, message: '邮箱不能为空!', trigger: 'blur' },\r\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] },\r\n        ],\r\n        mobile: [\r\n          { required: true, message: '手机号不能为空!', trigger: 'blur' },\r\n          { validator: checkMobile, trigger: 'blur' },\r\n        ],\r\n      },\r\n    }\r\n  },\r\n  created() {\r\n    this.getUserList()\r\n  },\r\n  methods: {\r\n    // async getUserList() {\r\n    //   const { data: res } = await axios.get('http://127.0.0.1:8888/api/private/v1/users', {\r\n    //     params: this.queryInfo,\r\n    //   })\r\n    //   console.log(res)\r\n    // },\r\n    async getUserList() {\r\n      const { data: res } = await this.$http.get('users', { headers: { Authorization: this.token }, params: this.queryInfo })\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取用户列表失败！')\r\n      }\r\n      //返回状态正常，将请求的数据保存在data中\r\n      this.userList = res.data.users\r\n      this.total = res.data.total\r\n    },\r\n    // 监听pagesize改变的事件\r\n    handleSizeChange(newSize) {\r\n      this.queryInfo.pagesize = newSize\r\n      this.getUserList()\r\n    },\r\n    // 监听页码值改变的事件\r\n    handleCurrentChange(newPage) {\r\n      this.queryInfo.pagenum = newPage\r\n      this.getUserList()\r\n    },\r\n    // 监听switch开关的状态改变\r\n    async userState(userinfo) {\r\n      console.log(userinfo)\r\n      console.log(this.token)\r\n      // const url = `http://127.0.0.1:8888/api/private/v1/users/${userinfo.id}/state/${userinfo.mg_state}`\r\n      const { data: res } = await this.$http.put(`users/${userinfo.id}/state/${userinfo.mg_state}`)\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        userinfo.mg_state = !userinfo.mg_state\r\n        // console.log(res)\r\n        return this.$message.error('更新用户状态失败！')\r\n      }\r\n      this.$message.success('更新用户状态成功！')\r\n      // userinfo.mg_state = !userinfo.mg_state\r\n      // console.log(res)\r\n    },\r\n    // 监听添加用户对话框的关闭事件\r\n    addDialogClosed() {\r\n      this.$refs.addFormRef.resetFields()\r\n    },\r\n    // 监听修改用户对话框的关闭事件\r\n    editDialogClosed() {\r\n      this.$refs.editFormRef.resetFields()\r\n    },\r\n    //点击确定按钮，添加新用户\r\n    addUser() {\r\n      this.$refs.addFormRef.validate(async (valid) => {\r\n        // console.log(valid)\r\n        if (!valid) return\r\n        // 发起添加用户的网络请求\r\n        // const { data: res } = await axios.post(\r\n        //   'http://127.0.0.1:8888/api/private/v1/users',\r\n        //   {\r\n        //     headers: { Authorization: this.token },\r\n        //   },\r\n        //   this.addForm\r\n        // )\r\n        const { data: res } = await this.$http.post('users', this.addForm, { headers: { Authorization: this.token } })\r\n        // console.log('0000000000000000000')\r\n        // console.log(res)\r\n        // console.log('0000000000000000000')\r\n        if (res.meta.status !== 201) {\r\n          // this.$message.error({\r\n          //   message: '添加用户失败！',\r\n          //   center: true,\r\n          //   duration: 3000,\r\n          // })\r\n          this.$message.error('添加用户失败！')\r\n        }\r\n        // this.$message.success({\r\n        //   message: '添加用户成功！',\r\n        //   center: true,\r\n        //   duration: 3000,\r\n        // })\r\n        this.$message.error('添加用户成功！')\r\n        // console.log('--------------------------')\r\n        // console.log(res)\r\n        // console.log('---------------------')\r\n        // 隐藏添加用户的对话框\r\n        this.addDialogVisible = false\r\n        // 重新获取用户列表的数据\r\n        this.getUserList()\r\n      })\r\n    },\r\n    // 点击修改用户信息\r\n    async showEditDialog(id) {\r\n      const { data: res } = await this.$http.get('users/' + id, { headers: { Authorization: this.token } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '查询用户信息失败！',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      }\r\n      this.editForm = res.data\r\n      this.editDialogVisible = true\r\n    },\r\n    // 修改用户信息并提交\r\n    editUserInfo() {\r\n      this.$refs.editFormRef.validate(async (valid) => {\r\n        if (!valid) return\r\n        // 发起修改用户信息的数据请求\r\n        const { data: res } = await this.$http.put(\r\n          'users/' + this.editForm.id,\r\n          {\r\n            email: this.editForm.email,\r\n            mobile: this.editForm.mobile,\r\n          },\r\n          { headers: { Authorization: this.token } }\r\n        )\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error({\r\n            message: '更新用户信息失败！',\r\n            center: true,\r\n            duration: 3000,\r\n          })\r\n        }\r\n        // 关闭对话框\r\n        this.editDialogVisible = false\r\n        // 刷新数据列表\r\n        this.getUserList()\r\n        //提示数据列表\r\n        this.$message.success({\r\n          message: '更新用户信息成功!',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      })\r\n    },\r\n    // 根据Id删除对应的用户信息\r\n    async removeUserById(id) {\r\n      const confirmResult = await this.$confirm('此操作将永久的删除该用户，是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }).catch((err) => {\r\n        return err\r\n      })\r\n      if (confirmResult !== 'confirm') {\r\n        return this.$message.info({\r\n          message: '已取消删除!',\r\n          // center: true,\r\n          type: 'info',\r\n          duration: 3000,\r\n        })\r\n      }\r\n      // 发起删除用户信息的请求\r\n      const { data: res } = await this.$http.delete('users/' + id, { headers: { Authorization: this.token } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除用户失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除用户成功！',\r\n        center: true,\r\n      })\r\n      // 刷新一下表格信息--重新渲染一下用户信息\r\n      this.getUserList()\r\n\r\n      // alert('删除成功！')\r\n      // 如果用户确认删除，则返回值为字符串confim\r\n      // 如果用户取消了删除，则返回值为字符串cancel\r\n      // console.log(confirmResult)\r\n    },\r\n    // 分配角色的处理函数\r\n    async setRole(userinfo) {\r\n      this.userinfo = userinfo\r\n      // 在展示对话框之前，获取所有的角色列表\r\n      const { data: res } = await this.$http.get('roles', { headers: { Authorization: this.token } })\r\n      if (res.meta.status !== 200) {\r\n        // console.log(res)\r\n        return this.$message.error({\r\n          message: '获取角色列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      // alert('获取角色列表成功！')\r\n      this.$message.success({\r\n        message: '获取角色列表失败！',\r\n        center: true,\r\n      })\r\n      // 将用户的列表保存到数据中\r\n      this.rolesList = res.data\r\n      this.setRoleDialogVisible = true\r\n    },\r\n    // 点击按钮，分配角色\r\n    async saveRoleInfo() {\r\n      if (!this.selectedRoleId) {\r\n        return this.$message.error({\r\n          message: '请选择要分配的角色！',\r\n          center: true,\r\n        })\r\n      }\r\n      //如果已经选择了角色，发起请求\r\n      // const url = `http://127.0.0.1:8888/api/private/v1/users/${this.userinfo.id}/role`\r\n      // const { data: res } = await axios.put(url, { rid: this.selectedRoleId }, { headers: { Authorization: this.token } })\r\n      const { data: res } = await this.$http.put(`users/${this.userinfo.id}/role`, { rid: this.selectedRoleId })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '更新角色失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '更新角色成功！',\r\n        center: true,\r\n      })\r\n      this.getUserList()\r\n      this.setRoleDialogVisible = false\r\n    },\r\n    // 监听分配角色对话框的关闭事件\r\n    setRoleDialogClosed() {\r\n      this.selectedRoleId = ''\r\n      this.userinfo = {}\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.el-table {\r\n  margin-top: 15px;\r\n  font-size: 15px;\r\n  font-family: cursive;\r\n  text-align: center;\r\n  line-height: 15px;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\ParamsV.vue",["85","86","87"],"<template>\r\n  <div>\r\n    <!-- <p>这是参数组件</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <!-- <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item> -->\r\n      <el-breadcrumb-item>商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\r\n      <el-breadcrumb-item class=\"list\">分类参数</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 警告区域 -->\r\n      <el-alert title=\"注意:只允许为第三级分类设置相关参数!\" type=\"warning\" effect=\"dark\" :closable=\"false\" center show-icon> </el-alert>\r\n      <!-- 选择商品分类区域 -->\r\n      <el-row class=\"cat_opt\">\r\n        <el-col>\r\n          <span>选择商品分类:</span>\r\n          <!-- 选择商品分类的级联选择框 -->\r\n          <el-cascader expand-trigger=\"hover\" v-model=\"selectedCateKeys\" :options=\"cateList\" :props=\"cateProps\" @change=\"handleChange\"></el-cascader>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- tab页签区域 -->\r\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\r\n        <!-- 添加动态参数的面板 -->\r\n        <el-tab-pane label=\"动态参数\" name=\"many\">\r\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible = true\">添加参数</el-button>\r\n          <!-- 动态参数表格 -->\r\n          <el-table :data=\"manyTabData\" border stripe>\r\n            <!-- 动态展开行 -->\r\n            <el-table-column type=\"expand\">\r\n              <!-- 循环渲染Tag标签 -->\r\n              <template slot-scope=\"scope\">\r\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{ item }}</el-tag>\r\n                <!-- Tag的输入文本框 -->\r\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\"> </el-input>\r\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">New Tag</el-button>\r\n              </template>\r\n            </el-table-column>\r\n            <!-- 索引列 -->\r\n            <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"showEditDialog(scope.row.attr_id)\">修改</el-button>\r\n                <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n\r\n        <!-- 添加静态属性的面板 -->\r\n        <el-tab-pane label=\"静态属性\" name=\"only\">\r\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible = true\">添加属性</el-button>\r\n          <!-- 静态参数表格 -->\r\n          <el-table :data=\"onlyTabData\" border stripe>\r\n            <!-- 动态展开行 -->\r\n            <el-table-column type=\"expand\">\r\n              <template slot-scope=\"scope\">\r\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{ item }}</el-tag>\r\n                <!-- 静态添加参数标签 -->\r\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\"> </el-input>\r\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">New Tag</el-button>\r\n              </template>\r\n            </el-table-column>\r\n            <!-- 索引列 -->\r\n            <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"showEditDialog(scope.row.attr_id)\">修改</el-button>\r\n                <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n      <!-- 添加参数的对话框 -->\r\n      <el-dialog :title=\"'添加' + titleText\" :visible.sync=\"addDialogVisible\" width=\"50%\" @close=\"addDialogClosed\">\r\n        <!-- <span>这是一段信息</span> -->\r\n        <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\">\r\n          <el-form-item :label=\"titleText\" prop=\"attr_name\">\r\n            <el-input v-model=\"addForm.attr_name\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"addDialogVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n      <!-- 显示修改的对话框 -->\r\n      <el-dialog :title=\"'修改' + titleText\" :visible.sync=\"editDialogVisible\" width=\"50%\" @close=\"editDialogClosed\">\r\n        <!-- <span>这是一段信息</span> -->\r\n        <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"100px\">\r\n          <el-form-item :label=\"titleText\" prop=\"attr_name\">\r\n            <el-input v-model=\"editForm.attr_name\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"editDialogVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      cateList: [],\r\n      // 级联选择框的配置对象\r\n      cateProps: {\r\n        value: 'cat_id',\r\n        label: 'cat_name',\r\n        children: 'children',\r\n      },\r\n      //级联选择框双向绑定到的数组\r\n      selectedCateKeys: [],\r\n      //  被激活的页签的名称\r\n      activeName: 'many',\r\n      // 动态参数数据\r\n      manyTabData: [],\r\n      // 静态参数数据\r\n      onlyTabData: [],\r\n      // 控制添加对话框的显示与隐藏\r\n      addDialogVisible: false,\r\n      editDialogVisible: false,\r\n      // 添加参数的表单数据对象\r\n      addForm: {\r\n        attr_name: '',\r\n      },\r\n      // 添加表单的验证规则对象\r\n      addFormRules: {\r\n        attr_name: [{ required: true, message: '请输入参数名称', trigger: 'blur' }],\r\n      },\r\n      //----------------------\r\n      // 修改表单数据的对象\r\n      editForm: {},\r\n      // 修改表单数据的验证规则对象\r\n      editFormRules: {\r\n        attr_name: [{ required: true, message: '请输入参数的名称', trigger: 'blur' }],\r\n      },\r\n      // // 控制按钮与文本框的切换显示\r\n      // inputVisible: false,\r\n      // // 文本框中输入的内容\r\n      // inputValue: '',\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    // 获取所有的商品分类列表\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories')\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取商品分类失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.cateList = res.data\r\n    },\r\n    // 级联选择框选中项变化，会触发这个函数\r\n    handleChange() {\r\n      // console.log(this.selectedCateKeys)\r\n      this.getParamsData()\r\n    },\r\n    // tab页签点击事件的处理函数\r\n    handleTabClick() {\r\n      console.log(this.activeName)\r\n      this.getParamsData()\r\n    },\r\n    // 获取参数的列表数据\r\n    async getParamsData() {\r\n      // 证明选中的不是三级分类\r\n      if (this.selectedCateKeys.length !== 3) {\r\n        this.selectedCateKeys = []\r\n        this.manyTabData = []\r\n        this.onlyTabData = []\r\n        return\r\n      }\r\n      // 证明选中的是三级分类\r\n      // console.log(this.selectedCateKeys)\r\n      // 根据所选分类的Id,和当前所处的面板，获取对应的参数\r\n      const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, { params: { sel: this.activeName } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取分类列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      // alert('获取分类列表成功！')\r\n      res.data.forEach((item) => {\r\n        item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []\r\n        // 控制文本框的显示与隐藏\r\n        item.inputVisible = false\r\n        item.inputValue = ''\r\n      })\r\n      console.log(res.data)\r\n      if (this.activeName === 'many') {\r\n        this.manyTabData = res.data\r\n      } else {\r\n        this.onlyTabData = res.data\r\n      }\r\n    },\r\n    // 监听对话框的关闭事件\r\n    addDialogClosed() {\r\n      this.$refs.addFormRef.resetFields()\r\n    },\r\n    // 点击按钮，添加参数\r\n    addParams() {\r\n      this.$refs.addFormRef.validate(async (valid) => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.post(`categories/${this.cateId}/attributes`, {\r\n          attr_name: this.addForm.attr_name,\r\n          attr_sel: this.activeName,\r\n        })\r\n        // console.log(res)\r\n        if (res.meta.status !== 201) {\r\n          return this.$message.error({\r\n            message: '添加参数失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '添加参数成功！',\r\n          center: true,\r\n        })\r\n        // 关闭对话框\r\n        this.addDialogVisible = false\r\n        // 重新刷新列表\r\n        this.getParamsData()\r\n      })\r\n    },\r\n    // 点击显示修改的对话框\r\n    async showEditDialog(attr_id) {\r\n      const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes/${attr_id}`, {\r\n        params: {\r\n          attr_sel: this.activeName,\r\n        },\r\n      })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取参数信息失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取参数信息成功！',\r\n        center: true,\r\n      })\r\n      this.editForm = res.data\r\n      this.editDialogVisible = true\r\n    },\r\n    editDialogClosed() {\r\n      this.$refs.editFormRef.resetFields()\r\n    },\r\n    // 修改参数的函数\r\n    editParams() {\r\n      this.$refs.editFormRef.validate(async (valid) => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${this.editForm.attr_id}`, {\r\n          attr_name: this.editForm.attr_name,\r\n          attr_sel: this.activeName,\r\n        })\r\n        console.log(res)\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error({\r\n            message: '修改参数失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '修改参数成功！',\r\n          center: true,\r\n        })\r\n        this.getParamsData()\r\n        this.editDialogVisible = false\r\n      })\r\n    },\r\n    // 删除参数的函数\r\n    async removeParams(attr_id) {\r\n      // 警告提示\r\n      const confirmResult = await this.$confirm('此操作将永久删除该参数，是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }).catch((err) => err)\r\n      // 用户取消了删除的操作\r\n      if (confirmResult !== 'confirm') {\r\n        return this.$message.info({\r\n          message: '已取消删除！',\r\n          center: true,\r\n        })\r\n      }\r\n      // 删除的业务逻辑\r\n      const { data: res } = await this.$http.delete(`categories/${this.cateId}/attributes/${attr_id}`)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除参数失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除参数成功！',\r\n        center: true,\r\n      })\r\n      this.getParamsData()\r\n    },\r\n    // 文本框失去焦点或摁下enter会触发事件\r\n    async handleInputConfirm(row) {\r\n      // console.log('OK')\r\n      // 先判断tag中的内容是否合法，然后再做后续处理\r\n      if (row.inputValue.trim().length === 0) {\r\n        row.inputValue = ''\r\n        row.inputVisible = false\r\n        return\r\n      }\r\n      // 如果合法就做后续的处理\r\n      row.attr_vals.push(row.inputValue.trim())\r\n      row.inputValue = ''\r\n      row.inputVisible = false\r\n      // 发起请求，保存这次操作\r\n      const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`, {\r\n        attr_name: row.attr_name,\r\n        attr_sel: row.attr_sel,\r\n        attr_vals: row.attr_vals.join(' '),\r\n      })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '修改参数项失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '修改参数项成功！',\r\n        center: true,\r\n      })\r\n    },\r\n    // 点击按钮，展示文本输入框\r\n    showInput(row) {\r\n      // this.inputVisible = true\r\n      // 让文本框自动获得焦点\r\n      // $nextTick方法的作用：就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\r\n      row.inputVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs.saveTagInput.$refs.input.focus()\r\n      })\r\n    },\r\n    // 删除对应的参数可选项\r\n    async handleClose(i, row) {\r\n      row.attr_vals.splice(i, 1)\r\n      const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`, {\r\n        attr_name: row.attr_name,\r\n        attr_sel: row.attr_sel,\r\n        attr_vals: row.attr_vals.join(' '),\r\n      })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除参数项失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除参数项成功！',\r\n        center: true,\r\n      })\r\n    },\r\n  },\r\n  computed: {\r\n    // 如果按钮需要被禁用，则返回true,否则返回false\r\n    isBtnDisabled() {\r\n      return this.selectedCateKeys.length !== 3\r\n    },\r\n    // 当前选中的三级分类的Id\r\n    cateId() {\r\n      if (this.selectedCateKeys.length === 3) {\r\n        return this.selectedCateKeys[2]\r\n      }\r\n      return null\r\n    },\r\n    titleText() {\r\n      if (this.activeName === 'many') {\r\n        return '动态参数'\r\n      }\r\n      return '静态属性'\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  margin-top: 18px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n/deep/.el-breadcrumb__item:last-child .el-breadcrumb__inner,\r\n.el-breadcrumb__item:last-child .el-breadcrumb__inner a,\r\n.el-breadcrumb__item:last-child .el-breadcrumb__inner a:hover,\r\n.el-breadcrumb__item:last-child .el-breadcrumb__inner:hover {\r\n  color: red;\r\n  font-size: 18px;\r\n  font-family: kaiti;\r\n  font-weight: bolder;\r\n  cursor: text;\r\n}\r\n.cat_opt {\r\n  margin: 18px 0;\r\n}\r\n.input-new-tag {\r\n  width: 120px;\r\n}\r\n.el-tag {\r\n  margin-left: 10px;\r\n}\r\n.el-button--small {\r\n  margin-left: 10px;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\order\\OrderV.vue",["88"],"<template>\r\n  <div>\r\n    <!-- <p>这是订单组件</p> -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>订单管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>订单列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 搜索框区域 -->\r\n      <el-row>\r\n        <el-col :span=\"8\">\r\n          <el-input placeholder=\"请输入内容\">\r\n            <el-button slot=\"append\" icon=\"el-icon-search\" width=\"60px\"></el-button>\r\n          </el-input>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- 表格区域 -->\r\n      <el-table :data=\"orderList\" border stripe>\r\n        <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n        <el-table-column label=\"订单编号\" prop=\"order_number\"></el-table-column>\r\n        <el-table-column label=\"订单价格\" prop=\"order_price\"></el-table-column>\r\n        <el-table-column label=\"是否付款\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag type=\"success\" v-if=\"scope.row.pay_status === '1'\">已付款</el-tag>\r\n            <el-tag type=\"danger\" v-else>未付款</el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"是否发货\" prop=\"is_send\"></el-table-column>\r\n        <el-table-column label=\"下单时间\">\r\n          <template slot-scope=\"scope\">\r\n            {{ scope.row.create_time | dataFormat }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"180px\">\r\n          <template slot-scope=\"\">\r\n            <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-edit\" @click=\"showBox\">修改</el-button>\r\n            <el-button type=\"success\" size=\"mini\" icon=\"el-icon-location\" @click=\"showProgressBox\">物流</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <!-- 分页区域 -->\r\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"queryInfo.pagenum\" :page-sizes=\"[10, 15, 20, 25]\" :page-size=\"queryInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\"> </el-pagination>\r\n    </el-card>\r\n    <!-- 修改地址的对话框 -->\r\n    <el-dialog title=\"修改地址\" :visible.sync=\"addressDialogVisible\" width=\"50%\" @close=\"addressDialogClosed\">\r\n      <!-- <span>这是一段信息</span> -->\r\n      <el-form :model=\"addressForm\" :rules=\"addressFormRules\" ref=\"addressFormRef\" label-width=\"100px\">\r\n        <el-form-item label=\"省市区/县\" prop=\"address1\">\r\n          <!-- <el-input v-model=\"addressForm.address1\"></el-input> -->\r\n          <el-cascader :options=\"cityData\" v-model=\"addressForm.address1\"></el-cascader>\r\n        </el-form-item>\r\n        <el-form-item label=\"详细地址\" prop=\"address2\">\r\n          <el-input v-model=\"addressForm.address2\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addressDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addressDialogVisible = false\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n    <!-- 物流进度的对话框 -->\r\n\r\n    <el-dialog title=\"物流进度\" :visible.sync=\"ProgressDialogVisible\" width=\"50%\">\r\n      <span>这是一段信息</span>\r\n      <span slot=\"footer\" class=\"dialog-footer\"> </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport cityData from './citydata.js'\r\nexport default {\r\n  data() {\r\n    return {\r\n      queryInfo: {\r\n        query: '',\r\n        pagenum: 1, // 当前页号\r\n        pagesize: 10, //当前页数\r\n      },\r\n      total: 0,\r\n      orderList: [],\r\n      // 修改地址对话框的显示与隐藏\r\n      addressDialogVisible: false,\r\n      // 物流进度的对话框显示与隐藏\r\n      ProgressDialogVisible: false,\r\n      addressForm: {\r\n        address1: [],\r\n        address2: '',\r\n      },\r\n      addressFormRules: {\r\n        address1: [{ required: true, message: '请填写省市区/县!', trigger: 'blur' }],\r\n        address2: [{ required: true, message: '请填写详细地址!', trigger: 'blur' }],\r\n      },\r\n      cityData: cityData,\r\n      progressInfo: [],\r\n    }\r\n  },\r\n  created() {\r\n    this.getOrderList()\r\n  },\r\n  methods: {\r\n    async getOrderList() {\r\n      const { data: res } = await this.$http.get('orders', { params: this.queryInfo })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取订单列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取订单列表成功！',\r\n        center: true,\r\n      })\r\n      this.total = res.data.total\r\n      this.orderList = res.data.goods\r\n      console.log(res)\r\n    },\r\n    handleSizeChange(newSize) {\r\n      this.queryInfo.pagesize = newSize\r\n      this.getOrderList()\r\n    },\r\n    handleCurrentChange(newPage) {\r\n      this.queryInfo.pagesize = newPage\r\n      this.getOrderList()\r\n    },\r\n    // 修改地址\r\n   showBox() {\r\n      this.addressDialogVisible = true\r\n    },\r\n    //监听对话框的关闭事件--清空数据\r\n    addressDialogClosed() {\r\n      this.$refs.addressFormRef.resetFields()\r\n    },\r\n    // 物流进度的对话框\r\n    async showProgressBox() {\r\n      const { data: res } = await this.$http.get('/kuaidi/1106975712662')\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取物流进度失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取物流进度成功！',\r\n        center: true,\r\n      })\r\n      this.progressInfo = res.data\r\n      this.ProgressDialogVisible = true\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  margin-top: 18px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.el-table {\r\n  margin-top: 18px;\r\n}\r\n.el-cascader {\r\n  width: 100%;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\CateV.vue",["89"],"<template>\r\n  <div>\r\n    <!-- <p>这是goods组件</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <!-- <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item> -->\r\n      <el-breadcrumb-item>商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"javascripe:;\">商品分类</a></el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <el-row>\r\n        <el-col>\r\n          <el-button type=\"primary\" @click=\"showCateDialog\">添加分类</el-button>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- 表格区域 -->\r\n      <tree-table :data=\"cateList\" :columns=\"columns\" :expand-type=\"false\" :selection-type=\"false\" show-index border class=\"treeTable\">\r\n        <!-- 是否有效 -->\r\n        <template slot=\"isOk\" slot-scope=\"scope\">\r\n          <i class=\"el-icon-success\" v-if=\"scope.row.cat_deleted === false\" style=\"color: lightgreen\"></i>\r\n          <i class=\"el-icon-error\" v-else style=\"color: red\"></i>\r\n        </template>\r\n        <!-- 权限等级 -->\r\n        <template slot=\"order\" slot-scope=\"scope\">\r\n          <el-tag size=\"mini\" v-if=\"scope.row.cat_level === 0\">一级</el-tag>\r\n          <el-tag size=\"mini\" type=\"success\" v-else-if=\"scope.row.cat_level === 1\">二级</el-tag>\r\n          <el-tag size=\"mini\" type=\"warning\" v-else>三级</el-tag>\r\n        </template>\r\n        <!-- 操作区域 -->\r\n        <template slot=\"option\" slot-scope=\"\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\">修改</el-button>\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\">删除</el-button>\r\n        </template>\r\n      </tree-table>\r\n      <!-- 分页区域 -->\r\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"queryInfo.pagenum\" :page-sizes=\"[5, 10, 20, 30]\" :page-size=\"queryInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\"> </el-pagination>\r\n    </el-card>\r\n    <!-- 添加分类的对话框区域 -->\r\n    <el-dialog title=\"添加分类\" :visible.sync=\"addCateDialogVisible\" width=\"30%\" @close=\"addCateDialogClosed\">\r\n      <!-- <span>这是一段信息</span> -->\r\n      <!-- 添加分类对话框 -->\r\n      <el-form :model=\"addCateForm\" :rules=\"addCateFormRules\" ref=\"addCateFormRef\" label-width=\"100px\">\r\n        <el-form-item label=\"分类名称:\" prop=\"cat_name\">\r\n          <el-input v-model=\"addCateForm.cat_name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"父级分类:\">\r\n          <!-- options:用来指定数据源 -->\r\n          <!-- props:用来指定配置对象 -->\r\n          <el-cascader expand-trigger=\"hover\" v-model=\"selectedKeys\" :options=\"parentCateList\" @change=\"parentCateChanged\" :props=\"cascaderProps\" clearable></el-cascader>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addCateDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addCate\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      // 查询条件\r\n      queryInfo: {\r\n        type: 3,\r\n        pagenum: 1,\r\n        pagesize: 5,\r\n      },\r\n\r\n      // 商品分类的数据列表，默认为空\r\n      cateList: [],\r\n      // 添加分类的表单数据对象\r\n      addCateForm: {\r\n        //将要添加的分类名称\r\n        cat_name: '',\r\n        // 父级分类的Id\r\n        cat_pid: 0,\r\n        // 分类的等级，默认要添加的是1级分类\r\n        cat_level: 0,\r\n      },\r\n      // 添加分类表单的验证规则对象\r\n      addCateFormRules: {\r\n        cat_name: [{ required: true, message: '请输入分类的名称', trigger: 'blur' }],\r\n      },\r\n      total: 0,\r\n      // 控制添加分类对话框的显示与隐藏\r\n      addCateDialogVisible: false,\r\n      // 存储获取到的数据\r\n      parentCateList: [],\r\n      // 指定级联选择器的配置对象\r\n      cascaderProps: {\r\n        value: 'cat_id', //具体选中的值\r\n        label: 'cat_name', // 名称\r\n        children: 'children', //父子嵌套用的哪个属性\r\n        checkStrictly: true,\r\n      },\r\n      // 选中的父级分类的Id数组\r\n      selectedKeys: [],\r\n      // 为table指定列的定义\r\n      columns: [\r\n        {\r\n          label: '分类名称',\r\n          prop: 'cat_name',\r\n        },\r\n        // 模板列----使用插槽\r\n        {\r\n          label: '是否有效',\r\n          // 表示将当前列定义为模板列\r\n          type: 'template',\r\n          template: 'isOk',\r\n        },\r\n        {\r\n          label: '权限等级',\r\n          // 表示将当前列定义为模板列\r\n          type: 'template',\r\n          template: 'order',\r\n        },\r\n        {\r\n          label: '权限等级',\r\n          // 表示将当前列定义为模板列\r\n          type: 'template',\r\n          template: 'option',\r\n        },\r\n      ],\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    // 获取商品分类的数据\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories', { params: this.queryInfo })\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取商品分类数据失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取商品分类数据成功！',\r\n        center: true,\r\n      })\r\n      // 把数据列表，赋值给cateList\r\n      this.cateList = res.data.result\r\n      this.total = res.data.total\r\n    },\r\n    // 监听pagesize的变化\r\n    handleSizeChange(newSize) {\r\n      this.queryInfo.pagesize = newSize\r\n      this.getCateList()\r\n    },\r\n    // 监听pagenum的变化\r\n    handleCurrentChange(newPage) {\r\n      this.queryInfo.pagenum = newPage\r\n      this.getCateList()\r\n    },\r\n    // 添加分类对话框的显示与隐藏\r\n    showCateDialog() {\r\n      this.getParentCateList()\r\n      this.addCateDialogVisible = true\r\n    },\r\n    // 获取父级分类的数据列表\r\n    async getParentCateList() {\r\n      const { data: res } = await this.$http.get('categories', { parmas: { type: 2 } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取父级分类数据失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.parentCateList = res.data\r\n    },\r\n    // 选择项发生变化触发这个函数\r\n    parentCateChanged() {\r\n      console.log(this.selectedKeys)\r\n      // 如果selectedKeys数组中的length大于0，证明选中的父级分类；\r\n      //反之，说明没有选中任何父级分类\r\n      if (this.selectedKeys.length > 0) {\r\n        // 父级分类的Id\r\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1]\r\n        // 为当前分类的等级赋值\r\n        this.addCateForm.cat_level = this.selectedKeys.length\r\n        return\r\n      } else {\r\n        // 父级分类的Id\r\n        this.addCateForm.cat_pid = 0\r\n        // 为当前分类的等级赋值\r\n        this.addCateForm.cat_level = 0\r\n      }\r\n    },\r\n    addCate() {\r\n      // 点击按钮，添加新的分类\r\n      // console.log(this.addCateForm)\r\n      this.$refs.addCateFormRef.validate(async (valid) => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.post('categories', this.addCateForm)\r\n        if (res.meta.status !== 201) {\r\n          return this.$message.error({\r\n            message: '添加分类失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '添加分类成功！',\r\n          center: true,\r\n        })\r\n        this.getCateList()\r\n        this.addCateDialogVisible = false\r\n      })\r\n    },\r\n    // 监听对话框关闭事件--重置表单数据\r\n    addCateDialogClosed() {\r\n      this.$refs.addCateFormRef.resetFields()\r\n      this.selectedKeys = []\r\n      this.addCateForm.cat_level = 0\r\n      this.addCateForm.cat_pid = 0\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n  a {\r\n    color: red;\r\n  }\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.treeTable {\r\n  margin-top: 18px;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\report\\ReportV.vue",[],"D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\power\\RolesV.vue",["90"],"<template>\r\n  <div>\r\n    <!-- 面包屑导航区域 -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item>\r\n      <el-breadcrumb-item>权限管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>角色列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 添加角色按钮区域 -->\r\n      <el-row>\r\n        <el-col>\r\n          <el-button type=\"primary\">添加角色</el-button>\r\n        </el-col>\r\n        <!-- 角色权限列表区域 -->\r\n        <el-table :data=\"roleList\" border stripe>\r\n          <!-- 展开列 -->\r\n          <el-table-column type=\"expand\">\r\n            <!-- 这是放一个插槽用于存放数据 -->\r\n            <template slot-scope=\"scope\">\r\n              <el-row :class=\"['bdBottom', i1 === 0 ? 'bdTop' : '', 'vcenter']\" v-for=\"(item1, i1) in scope.row.children\" :key=\"item1.id\">\r\n                <!-- 渲染一级权限 -->\r\n                <el-col :span=\"5\">\r\n                  <el-tag closable @close=\"removeRightById(scope.row, item1.id)\">\r\n                    {{ item1.authName }}\r\n                  </el-tag>\r\n                  <i class=\"el-icon-caret-right\"></i>\r\n                </el-col>\r\n                <!-- 渲染二，三级权限 -->\r\n                <el-col :span=\"19\">\r\n                  <!-- 通过for循环嵌套渲染二级权限  -->\r\n                  <el-row :class=\"[i2 === 0 ? '' : 'bdTop', 'vcenter']\" v-for=\"(item2, i2) in item1.children\" :key=\"item2.id\">\r\n                    <el-col :span=\"6\">\r\n                      <el-tag type=\"success\" closable @close=\"removeRightById(scope.row, item2.id)\">{{ item2.authName }}</el-tag>\r\n                      <i class=\"el-icon-caret-right\"></i>\r\n                    </el-col>\r\n                    <!-- 三级权限 -->\r\n                    <el-col :span=\"18\">\r\n                      <el-tag type=\"warning\" v-for=\"item3 in item2.children\" :key=\"item3.id\" closable @close=\"removeRightById(scope.row, item3.id)\">\r\n                        {{ item3.authName }}\r\n                      </el-tag>\r\n                    </el-col>\r\n                  </el-row>\r\n                </el-col>\r\n              </el-row>\r\n            </template>\r\n          </el-table-column>\r\n          <!-- 索引列 -->\r\n          <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n          <el-table-column label=\"角色名称\" prop=\"roleName\"></el-table-column>\r\n          <el-table-column label=\"角色描述\" prop=\"roleDesc\"></el-table-column>\r\n          <el-table-column label=\"操作\" width=\"285px\">\r\n            <!-- 以插槽的形式放在这里 -->\r\n            <template slot-scope=\"scope\">\r\n              <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\">修改</el-button>\r\n              <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\">删除</el-button>\r\n              <el-button type=\"warning\" icon=\"el-icon-setting\" size=\"mini\" @click=\"showSetRightDialog(scope.row)\">分配权限</el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-row>\r\n    </el-card>\r\n    <!-- 分配权限的对话框 -->\r\n    <el-dialog title=\"分配权限\" :visible.sync=\"setRightDialogVisible\" width=\"50%\" @close=\"setRightDialogClosed\">\r\n      <!-- <span>这是一段信息</span> -->\r\n      <!-- 内容区域 -->\r\n      <el-tree :data=\"rightsList\" :props=\"treeProps\" show-checkbox node-key=\"id\" default-expand-all :default-checked-keys=\"deKeys\" ref=\"treeRef\"></el-tree>\r\n\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"setRightDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"allotRights\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nexport default {\r\n  data() {\r\n    const token = window.sessionStorage.getItem('token')\r\n    return {\r\n      token: token,\r\n      // 所有角色列表数据\r\n      roleList: [],\r\n      // 获取到的用户权限数据\r\n      rightsList: [],\r\n      // 控制分配权限对话框的显示与隐藏\r\n      setRightDialogVisible: false,\r\n      // 树形控件的属性绑定对象\r\n      treeProps: {\r\n        label: 'authName',\r\n        children: 'children',\r\n      },\r\n      // 默认选中的节点ID值数组\r\n      deKeys: [],\r\n      // 当前即将分配权限的角色Id\r\n      roleId: '',\r\n    }\r\n  },\r\n  created() {\r\n    this.getRolesList()\r\n  },\r\n  methods: {\r\n    // 获取所有角色列表\r\n    async getRolesList() {\r\n      const { data: res } = await this.$http.get('roles', { headers: { Authorization: this.token } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取角色列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      // alert('获取列表成功！')\r\n      this.roleList = res.data\r\n      // console.log(this.roleList)\r\n      // this.getRolesList = res.data\r\n      // console.log(this.getRolesList)\r\n    },\r\n    // 根据id删除对应的权限\r\n    async removeRightById(role, rightId) {\r\n      //弹窗提示是否要删除\r\n      const confimResult = await this.$confirm('此操作将永久删除该权限，是否继续', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }).catch((err) => err)\r\n      if (confimResult !== 'confirm') {\r\n        return this.$message.info({\r\n          message: '取消了删除!',\r\n          center: true,\r\n        })\r\n      }\r\n      // alert('确认了删除！')\r\n      // const Str = `roles/${role.id}/rights/${rightId}`\r\n      // const url = 'http://127.0.0.1:8888/api/private/v1' + `roles/${role.id}/rights/${rightId}`\r\n      // const url1 = `http://127.0.0.1:8888/api/private/v1/roles/${role.id}/rights/${rightId}`\r\n      // const { data: res } = await axios.delete(url1, { headers: { Authorization: this.token } })\r\n      const { data: res } = await this.$http.delete(`roles/${role.id}/rights/${rightId}`)\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除权限失败！',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除权限成功！',\r\n        center: true,\r\n        duration: 3000,\r\n      })\r\n      // 重新刷新权限列表\r\n      // this.getRolesList()\r\n      role.children = res.data\r\n    },\r\n    // 分配权限的对话框\r\n    async showSetRightDialog(role) {\r\n      this.roleId = role.id\r\n      // 获取所有权限的数据----呈树状图显示\r\n      const { data: res } = await this.$http.get('rights/tree', { headers: { Authorization: this.token } })\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取用户权限列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取用户权限列表成功！',\r\n        center: true,\r\n      })\r\n      // 用户权限列表获取成功之后，将获取到的数据存储到data中\r\n      this.rightsList = res.data\r\n      // 递归获取三级节点的Id\r\n      this.getLeafKeys(role, this.deKeys)\r\n      console.log(this.rightsList)\r\n      this.setRightDialogVisible = true\r\n    },\r\n    // 通过递归的形式，获取角色下所有的三级权限的\r\n    // id,并保持到deKeys数组中\r\n    getLeafKeys(node, arr) {\r\n      if (!node.children) {\r\n        return arr.push(node.id)\r\n      }\r\n      node.children.forEach((item) => this.getLeafKeys(item, arr))\r\n    },\r\n    // 监听分配权限对话框的关闭事件\r\n    setRightDialogClosed() {\r\n      this.deKeys = []\r\n    },\r\n    // 点击为角色分配权限\r\n    async allotRights() {\r\n      const key = [...this.$refs.treeRef.getCheckedKeys(), ...this.$refs.treeRef.getHalfCheckedKeys()]\r\n      // 获取选中和半选中的Id值\r\n      // console.log(key)\r\n      // 将数组转化为以逗号拼接的字符串\r\n      const IdStr = key.join(',')\r\n      // const url = `http://127.0.0.1:8888/api/private/v1/roles/${this.roleId}/rights`\r\n      // const { data: res } = await axios.post(url, { rids: IdStr }, { headers: { Authorization: this.token } })\r\n      const { data: res } = await this.$http.post(`roles/${this.roleId}/rights`, { rids: IdStr })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '分配权限失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '分配权限成功！',\r\n        center: true,\r\n      })\r\n      // 分配权限成功之后，需要重新渲染权限列表并且关闭当前分配权限对话框\r\n      this.getRolesList()\r\n      this.setRightDialogVisible = false\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.el-tag {\r\n  margin: 10px;\r\n}\r\n// 边框样式\r\n.bdTop {\r\n  border-top: 1px solid #eee;\r\n}\r\n.bdBottom {\r\n  border-bottom: 1px solid #eee;\r\n}\r\n// 垂直居中对齐\r\n.vcenter {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\goods_List.vue",["91"],"<template>\r\n  <div>\r\n    <!-- <p>这是商品列表组件</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <!-- <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item> -->\r\n      <el-breadcrumb-item class=\"list\">商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\r\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"8\">\r\n          <el-input placeholder=\"请输入内容\" v-model=\"queryInfo.query\" clearable @keydown.enter.native=\"getGoodsList\" @clear=\"getGoodsList\">\r\n            <el-button slot=\"append\" icon=\"el-icon-search\" width=\"60px\" @click=\"getGoodsList\"></el-button>\r\n          </el-input>\r\n        </el-col>\r\n        <el-col :span=\"4\">\r\n          <el-button type=\"primary\" @click=\"goAddpage\">添加商品</el-button>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- table表格区域 -->\r\n      <el-table :data=\"goodsList\" border stripe>\r\n        <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n        <el-table-column label=\"商品名称\" prop=\"goods_name\"></el-table-column>\r\n        <el-table-column label=\"商品价格(元)\" prop=\"goods_price\" width=\"75px\"></el-table-column>\r\n        <el-table-column label=\"商品重量\" prop=\"goods_weight\" width=\"80px\"></el-table-column>\r\n        <el-table-column label=\"创建时间\" prop=\"add_time\" width=\"140px\">\r\n          <template slot-scope=\"scope\">\r\n            <!-- {{ scope.row.add_time | dataFormat }} -->\r\n            {{ scope.row.add_time }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"180px\">\r\n          <template slot-scope=\"scope\">\r\n            <!-- {{ scope.row }} -->\r\n            <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-edit\">修改</el-button>\r\n            <el-button type=\"danger\" size=\"mini\" icon=\"el-icon-delete\" @click=\"removeById(scope.row.goods_id)\">删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <!-- 分页区域 -->\r\n      <el-pagination background @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page.sync=\"queryInfo.pagenum\" :page-sizes=\"[10, 20, 30, 40]\" :page-size=\"queryInfo.pagesize\" layout=\"sizes, prev, pager, next\" :total=\"total\"> </el-pagination>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    // document.querySelector('.list').classList.remove('.el-breadcrumb__inner')\r\n    return {\r\n      queryInfo: {\r\n        query: '', // 查询参数\r\n        pagenum: 1, //当前页码\r\n        pagesize: 10, // 每页显示条数\r\n      },\r\n      // 商品列表\r\n      goodsList: [],\r\n      // 总数据条数\r\n      total: 0,\r\n    }\r\n  },\r\n  created() {\r\n    this.getGoodsList()\r\n  },\r\n  methods: {\r\n    // 根据分页获取对应的商品列表\r\n    async getGoodsList() {\r\n      const { data: res } = await this.$http.get('goods', { params: this.queryInfo })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取商品列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取商品列表成功！',\r\n        center: true,\r\n      })\r\n      console.log(res.data)\r\n      this.goodsList = res.data.goods\r\n      this.total = res.data.total\r\n    },\r\n    handleSizeChange(newSize) {\r\n      this.queryInfo.pagesize = newSize\r\n      this.getGoodsList()\r\n    },\r\n    handleCurrentChange(newPage) {\r\n      this.queryInfo.pagenum = newPage\r\n      this.getGoodsList()\r\n    },\r\n    // 删除商品\r\n    async removeById(id) {\r\n      const confirmResult = await this.$confirm('此操作将永久删除该商品，是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }).catch((err) => err)\r\n      // 删除取消\r\n      if (confirmResult !== 'confirm') {\r\n        return this.$message.info({\r\n          message: '已经取消删除！',\r\n          center: true,\r\n        })\r\n      }\r\n      //删除成功！\r\n      const { data: res } = await this.$http.delete(`goods/${id}`)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除成功！',\r\n        center: true,\r\n      })\r\n      this.getGoodsList()\r\n    },\r\n    // 添加商品\r\n    goAddpage() {\r\n      this.$router.push('/goods/add')\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  margin-top: 18px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n/deep/.list {\r\n  color: red;\r\n  font-size: 18px;\r\n  font-family: kaiti;\r\n  font-weight: bolder;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\goods\\AddV.vue",["92","93","94","95","96","97","98","99","100"],"<template>\r\n  <div>\r\n    <!-- <p>添加商品组件</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <!-- <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item> -->\r\n      <el-breadcrumb-item class=\"list\">商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\r\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 提示区域 -->\r\n      <el-alert title=\"添加商品信息\" type=\"info\" center show-icon :closable=\"false\"></el-alert>\r\n      <!-- 步骤条区域 -->\r\n      <el-steps :space=\"200\" :active=\"activeIndex - 0\" finish-status=\"success\" align-center>\r\n        <el-step title=\"基本信息\"></el-step>\r\n        <el-step title=\"商品参数\"></el-step>\r\n        <el-step title=\"商品属性\"></el-step>\r\n        <el-step title=\"商品图片\"></el-step>\r\n        <el-step title=\"商品内容\"></el-step>\r\n        <el-step title=\"完成\"></el-step>\r\n      </el-steps>\r\n      <!-- tab栏区域 -->\r\n      <!-- 给属性一个固定的值需要用单引号包裹，因为是字符 -->\r\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\" label-position=\"top\">\r\n        <el-tabs :tab-position=\"'left'\" v-model=\"activeIndex\" :before-leave=\"beforeTableLeave\" @tab-click=\"tabClicked\">\r\n          <el-tab-pane label=\"基本信息\" name=\"0\">\r\n            <el-form-item label=\"商品名称\" prop=\"goods_name\">\r\n              <el-input v-model=\"addForm.goods_name\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品价格\" prop=\"goods_price\">\r\n              <el-input v-model=\"addForm.goods_price\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品重量\" prop=\"goods_weight\">\r\n              <el-input v-model=\"addForm.goods_weight\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品数量\" prop=\"goods_number\">\r\n              <el-input v-model=\"addForm.goods_number\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <!-- 级联选择器 -->\r\n            <el-form-item label=\"商品分类\" prop=\"goods_cat\">\r\n              <el-cascader v-model=\"addForm.goods_cat\" :options=\"cateList\" :props=\"cateProps\" expand-trigger=\"hover\" @change=\"handleChange\"></el-cascader>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品参数\" name=\"1\">\r\n            <!-- 渲染表单的item项 -->\r\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in manyTableData\" :key=\"item.attr_id\">\r\n              <!-- 复选框组 -->\r\n              <el-checkbox-group v-model=\"item.attr_vals\">\r\n                <el-checkbox :label=\"call\" v-for=\"(call, i) in item.attr_vals\" :key=\"i\" border></el-checkbox>\r\n              </el-checkbox-group>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品属性\" name=\"2\">\r\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in onlyTableData\" :key=\"item.attr_id\">\r\n              <el-input v-model=\"item.attr_vals\"></el-input>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品图片\" name=\"3\">\r\n            <!-- action:表示图片要上传到后台的API地址 -->\r\n            <el-upload :action=\"uploadURL\" :on-preview=\"handlePreview\" :on-remove=\"handleRemove\" list-type=\"picture\" :headers=\"headersObj\" :on-success=\"handleSuccess\">\r\n              <el-button size=\"small\" type=\"primary\">点击上传</el-button>\r\n              <!-- <div slot=\"tip\" class=\"el-upload__tip\">只能上传jpg/png文件，且不超过500kb</div> -->\r\n            </el-upload>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品内容\" name=\"4\">\r\n            <!-- 富文本编辑器组件 -->\r\n            <quill-editor v-model=\"addForm.goods_introduce\"></quill-editor>\r\n            <!-- 添加按钮区域 -->\r\n            <el-button type=\"primary\" class=\"addShop\" @click=\"add\">添加商品</el-button>\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </el-form>\r\n    </el-card>\r\n    <!-- 图片对话框区域 -->\r\n    <el-dialog title=\"图片预览\" :visible.sync=\"previewVisible\" width=\"50%\">\r\n      <img :src=\"previewPath\" alt=\"\" width=\"100%\" />\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport _ from 'lodash'\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeIndex: '0',\r\n      // 添加商品的表单数据对象\r\n      addForm: {\r\n        goods_name: '',\r\n        goods_price: 0,\r\n        goods_weight: 0,\r\n        goods_number: 0,\r\n        // 图片所属的分类数组\r\n        goods_cat: [],\r\n        // 图片的数组\r\n        pics: [],\r\n        // 商品的详情描述\r\n        goods_introduce: '',\r\n        attrs: [],\r\n      },\r\n      addFormRules: {\r\n        goods_name: [{ required: true, message: '请输入商品名称！', trigger: 'blur' }],\r\n        goods_price: [{ required: true, message: '请输入商品价格！', trigger: 'blur' }],\r\n        goods_weight: [{ required: true, message: '请输入商品重量！', trigger: 'blur' }],\r\n        goods_number: [{ required: true, message: '请输入商品数量！', trigger: 'blur' }],\r\n        goods_cat: [{ required: true, message: '请选择商品分类', trigger: 'blur' }],\r\n      },\r\n      // 商品分类列表\r\n      cateList: [],\r\n      // 级联选择器的配置对象\r\n      cateProps: {\r\n        label: 'cat_name',\r\n        value: 'cat_id',\r\n        children: 'children', // 父子节点的嵌套\r\n      },\r\n      // 动态参数列表数据\r\n      manyTableData: [],\r\n      // 静态属性列表数据\r\n      onlyTableData: [],\r\n      // 上传图片的URL地址\r\n      uploadURL: 'http://127.0.0.1:8888/api/private/v1/upload',\r\n      // 图片上传组件的headers请求头对象\r\n      headersObj: {\r\n        Authorization: window.sessionStorage.getItem('token'),\r\n      },\r\n      //存储图片预览路径\r\n      previewPath: '',\r\n      // 图片的显示与隐藏--默认为false\r\n      previewVisible: false,\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories')\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取商品分类列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取商品分类列表成功！',\r\n        center: true,\r\n      })\r\n      this.cateList = res.data\r\n      console.log(res.data)\r\n    },\r\n    // 级联选择器选中项发生变化，会触发这个函数\r\n    handleChange() {\r\n      console.log(this.addForm.goods_cat)\r\n      // 如果选中项不是第三类型，则清空选择器\r\n      if (this.addForm.goods_cat.length !== 3) {\r\n        return (this.addForm.goods_cat = [])\r\n      }\r\n    },\r\n    //判断切换下一个tab时，是否符合规则\r\n    beforeTableLeave(activeName, oldActiveName) {\r\n      // console.log(activeName, oldActiveName)\r\n      if (this.addForm.goods_name === '' || this.addForm.goods_price === '' || this.addForm.goods_weight === '' || this.addForm.goods_number === '') {\r\n        this.$message.error({\r\n          message: '请填写完整的基本信息！',\r\n          center: true,\r\n        })\r\n        return false\r\n      } else if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\r\n        this.$message.error({\r\n          message: '请选择商品分类！',\r\n          center: true,\r\n        })\r\n        return false\r\n      }\r\n    },\r\n    async tabClicked() {\r\n      // console.log(this.activeIndex)\r\n      if (this.activeIndex === '1') {\r\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\r\n          params: { sel: 'many' },\r\n        })\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error({\r\n            message: '获取动态参数列表失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '获取动态参数列表成功！',\r\n          center: true,\r\n        })\r\n        console.log(res.data)\r\n        // 将res.data字符串转化为数组--forEach--split(' ')\r\n        res.data.forEach((item) => {\r\n          item.attr_vals = item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ')\r\n        })\r\n        this.manyTableData = res.data\r\n      } else if (this.activeIndex === '2') {\r\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\r\n          params: { sel: 'only' },\r\n        })\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error({\r\n            message: '获取动态参数列表失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '获取动态参数列表成功！',\r\n          center: true,\r\n        })\r\n        console.log(res.data)\r\n        this.onlyTableData = res.data\r\n      }\r\n    },\r\n    // 处理图片预览效果\r\n    handlePreview(file) {\r\n      console.log(file)\r\n      //将url中的图片地址赋值给this.previewPath\r\n      this.previewPath = file.response.data.url\r\n      this.previewVisible = true\r\n    },\r\n    // 处理移除图片的操作\r\n    handleRemove(file) {\r\n      //1:获取要移除图片的临时路径\r\n      const filePath = file.response.data.tem_path\r\n      //2:找到临时图片在数组中的索引值\r\n      const i = this.addForm.pics.findIndex((x) => x.pic === filePath)\r\n      //3:调用数组的splice方法，把图片信息对象，从pics数组中删除\r\n      this.addForm.pics.splice(i, 1)\r\n      this.$message.success({\r\n        message: '删除图片成功！',\r\n        center: true,\r\n      })\r\n      console.log(this.addForm)\r\n    },\r\n    // 监听图片上传成功的事件\r\n    handleSuccess(response) {\r\n      console.log(response)\r\n      // 拼接得到一个图片的信息对象\r\n      const picInfo = { pic: response.data.tem_path }\r\n      // 将图片信息对象，push到pics数组中\r\n      this.addForm.pics.push(picInfo)\r\n      this.$message.success({\r\n        message: response.meta.msg,\r\n        center: true,\r\n      })\r\n      console.log(this.addForm)\r\n    },\r\n    // 添加商品的信息\r\n    add() {\r\n      this.$refs.addFormRef.validate(async (valid) => {\r\n        if (!valid) {\r\n          return this.$message.error({\r\n            message: '请填写必要的表单项！',\r\n            center: true,\r\n          })\r\n        }\r\n        // 执行添加的业务逻辑\r\n        // 将this.addForm进行深拷贝 ----closeDeep(obj)\r\n        const form = _.cloneDeep(this.addForm)\r\n        // 将goods_cat数组转化为以逗号隔开的字符串\r\n        form.goods_cat = form.goods_cat.join(',')\r\n        // console.log(form)\r\n        // 处理动态参数\r\n        this.manyTableData.forEach((item) => {\r\n          const newInfo = {\r\n            attr_id: item.attr_id,\r\n            attr_value: item.attr_vals.join(' '),\r\n          }\r\n          this.addForm.attrs.push(newInfo)\r\n        })\r\n        // 处理静态参数的vals值本来就是字符串，so不用转\r\n        this.onlyTableData.forEach((item) => {\r\n          const newInfo = {\r\n            attr_id: item.attr_id,\r\n            attr_value: item.attr_vals,\r\n          }\r\n          this.addForm.attrs.push(newInfo)\r\n        })\r\n        form.attrs = this.addForm.attrs\r\n        console.log(form)\r\n        // 发起请求添加商品\r\n        //商品的名称，必须是唯一的\r\n        const { data: res } = await this.$http.post('goods', form)\r\n        if (res.meta.status !== 201) {\r\n          return this.$message.error({\r\n            message: '添加商品失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '添加商品成功！',\r\n          center: true,\r\n        })\r\n        this.$router.push('/goods')\r\n      })\r\n    },\r\n  },\r\n  computed: {\r\n    cateId() {\r\n      if (this.addForm.goods_cat.length === 3) {\r\n        return this.addForm.goods_cat[2]\r\n      }\r\n      return null\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  margin-top: 18px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.el-steps {\r\n  margin: 15px 0;\r\n}\r\n.el-checkbox {\r\n  margin: 0 10px 0 0 !important;\r\n}\r\n.addShop {\r\n  margin-top: 16px;\r\n}\r\n</style>\r\n","D:\\vscode练习包\\Vue电商项目实战\\demo-vue2.0\\src\\components\\order\\citydata.js",[],{"ruleId":"101","severity":1,"message":"102","line":52,"column":5,"nodeType":"103","messageId":"104","endLine":52,"endColumn":16},{"ruleId":"101","severity":1,"message":"102","line":97,"column":7,"nodeType":"103","messageId":"104","endLine":97,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":50,"column":9,"nodeType":"103","messageId":"104","endLine":50,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":196,"column":11,"nodeType":"103","messageId":"104","endLine":196,"endColumn":22},{"ruleId":"101","severity":1,"message":"102","line":225,"column":11,"nodeType":"103","messageId":"104","endLine":225,"endColumn":22},{"ruleId":"101","severity":1,"message":"102","line":252,"column":9,"nodeType":"103","messageId":"104","endLine":252,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":273,"column":11,"nodeType":"103","messageId":"104","endLine":273,"endColumn":22},{"ruleId":"101","severity":1,"message":"102","line":266,"column":7,"nodeType":"103","messageId":"104","endLine":266,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":267,"column":7,"nodeType":"103","messageId":"104","endLine":267,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":174,"column":7,"nodeType":"103","messageId":"104","endLine":174,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":203,"column":7,"nodeType":"103","messageId":"104","endLine":203,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":270,"column":9,"nodeType":"103","messageId":"104","endLine":270,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":118,"column":7,"nodeType":"103","messageId":"104","endLine":118,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":181,"column":7,"nodeType":"103","messageId":"104","endLine":181,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":179,"column":7,"nodeType":"103","messageId":"104","endLine":179,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":83,"column":7,"nodeType":"103","messageId":"104","endLine":83,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":152,"column":7,"nodeType":"103","messageId":"104","endLine":152,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":156,"column":7,"nodeType":"103","messageId":"104","endLine":156,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":195,"column":9,"nodeType":"103","messageId":"104","endLine":195,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":215,"column":9,"nodeType":"103","messageId":"104","endLine":215,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":221,"column":7,"nodeType":"103","messageId":"104","endLine":221,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":238,"column":7,"nodeType":"103","messageId":"104","endLine":238,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":242,"column":7,"nodeType":"103","messageId":"104","endLine":242,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":251,"column":7,"nodeType":"103","messageId":"104","endLine":251,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":285,"column":9,"nodeType":"103","messageId":"104","endLine":285,"endColumn":20},"no-console","Unexpected console statement.","MemberExpression","unexpected"]