{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import axios from 'axios'\nexport default {\n  data() {\n    const token = window.sessionStorage.getItem('token');\n    return {\n      token: token,\n      // 所有角色列表数据\n      roleList: [],\n      // 获取到的用户权限数据\n      rightsList: [],\n      // 控制分配权限对话框的显示与隐藏\n      setRightDialogVisible: false,\n      // 树形控件的属性绑定对象\n      treeProps: {\n        label: 'authName',\n        children: 'children'\n      },\n      // 默认选中的节点ID值数组\n      deKeys: [],\n      // 当前即将分配权限的角色Id\n      roleId: ''\n    };\n  },\n\n  created() {\n    this.getRolesList();\n  },\n\n  methods: {\n    // 获取所有角色列表\n    async getRolesList() {\n      const {\n        data: res\n      } = await this.$http.get('roles', {\n        headers: {\n          Authorization: this.token\n        }\n      });\n\n      if (res.meta.status !== 200) {\n        return this.$message.error({\n          message: '获取角色列表失败！',\n          center: true\n        });\n      } // alert('获取列表成功！')\n\n\n      this.roleList = res.data; // console.log(this.roleList)\n      // this.getRolesList = res.data\n      // console.log(this.getRolesList)\n    },\n\n    // 根据id删除对应的权限\n    async removeRightById(role, rightId) {\n      //弹窗提示是否要删除\n      const confimResult = await this.$confirm('此操作将永久删除该权限，是否继续', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).catch(err => err);\n\n      if (confimResult !== 'confirm') {\n        return this.$message.info({\n          message: '取消了删除!',\n          center: true\n        });\n      } // alert('确认了删除！')\n      // const Str = `roles/${role.id}/rights/${rightId}`\n      // const url = 'http://127.0.0.1:8888/api/private/v1' + `roles/${role.id}/rights/${rightId}`\n      // const url1 = `http://127.0.0.1:8888/api/private/v1/roles/${role.id}/rights/${rightId}`\n      // const { data: res } = await axios.delete(url1, { headers: { Authorization: this.token } })\n\n\n      const {\n        data: res\n      } = await this.$http.delete(`roles/${role.id}/rights/${rightId}`); // console.log(res)\n\n      if (res.meta.status !== 200) {\n        return this.$message.error({\n          message: '删除权限失败！',\n          center: true,\n          duration: 3000\n        });\n      }\n\n      this.$message.success({\n        message: '删除权限成功！',\n        center: true,\n        duration: 3000\n      }); // 重新刷新权限列表\n      // this.getRolesList()\n\n      role.children = res.data;\n    },\n\n    // 分配权限的对话框\n    async showSetRightDialog(role) {\n      this.roleId = role.id; // 获取所有权限的数据----呈树状图显示\n\n      const {\n        data: res\n      } = await this.$http.get('rights/tree', {\n        headers: {\n          Authorization: this.token\n        }\n      }); // console.log(res)\n\n      if (res.meta.status !== 200) {\n        return this.$message.error({\n          message: '获取用户权限列表失败！',\n          center: true\n        });\n      }\n\n      this.$message.success({\n        message: '获取用户权限列表成功！',\n        center: true\n      }); // 用户权限列表获取成功之后，将获取到的数据存储到data中\n\n      this.rightsList = res.data; // 递归获取三级节点的Id\n\n      this.getLeafKeys(role, this.deKeys);\n      this.setRightDialogVisible = true;\n    },\n\n    // 通过递归的形式，获取角色下所有的三级权限的\n    // id,并保持到deKeys数组中\n    getLeafKeys(node, arr) {\n      if (!node.children) {\n        return arr.push(node.id);\n      }\n\n      node.children.forEach(item => this.getLeafKeys(item, arr));\n    },\n\n    // 监听分配权限对话框的关闭事件\n    setRightDialogClosed() {\n      this.deKeys = [];\n    },\n\n    // 点击为角色分配权限\n    async allotRights() {\n      const key = [...this.$refs.treeRef.getCheckedKeys(), ...this.$refs.treeRef.getHalfCheckedKeys()]; // 获取选中和半选中的Id值\n      // console.log(key)\n      // 将数组转化为以逗号拼接的字符串\n\n      const IdStr = key.join(','); // const url = `http://127.0.0.1:8888/api/private/v1/roles/${this.roleId}/rights`\n      // const { data: res } = await axios.post(url, { rids: IdStr }, { headers: { Authorization: this.token } })\n\n      const {\n        data: res\n      } = await this.$http.post(`roles/${this.roleId}/rights`, {\n        rids: IdStr\n      });\n\n      if (res.meta.status !== 200) {\n        return this.$message.error({\n          message: '分配权限失败！',\n          center: true\n        });\n      }\n\n      this.$message.success({\n        message: '分配权限成功！',\n        center: true\n      }); // 分配权限成功之后，需要重新渲染权限列表并且关闭当前分配权限对话框\n\n      this.getRolesList();\n      this.setRightDialogVisible = false;\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACAA;AACA;AACA;AACAC,kBADA;AAEA;AACAC,kBAHA;AAIA;AACAC,oBALA;AAMA;AACAC,kCAPA;AAQA;AACAC;AACAC,yBADA;AAEAC;AAFA,OATA;AAaA;AACAC,gBAdA;AAeA;AACAC;AAhBA;AAkBA,GArBA;;AAsBAC;AACA;AACA,GAxBA;;AAyBAC;AACA;AACA;AACA;AAAAX;AAAA;AAAAY;AAAAC;AAAA;AAAA;;AACA;AACA;AACAC,8BADA;AAEAC;AAFA;AAIA,OAPA,CAQA;;;AACA,+BATA,CAUA;AACA;AACA;AACA,KAfA;;AAgBA;AACA;AACA;AACA;AACAC,+BADA;AAEAC,8BAFA;AAGAC;AAHA,SAIAC,KAJA,CAIAC,UAJA;;AAKA;AACA;AACAN,2BADA;AAEAC;AAFA;AAIA,OAZA,CAaA;AACA;AACA;AACA;AACA;;;AACA;AAAAf;AAAA,wEAlBA,CAmBA;;AACA;AACA;AACAc,4BADA;AAEAC,sBAFA;AAGAM;AAHA;AAKA;;AACA;AACAP,0BADA;AAEAC,oBAFA;AAGAM;AAHA,SA3BA,CAgCA;AACA;;AACAC;AACA,KApDA;;AAqDA;AACA;AACA,4BADA,CAEA;;AACA;AAAAtB;AAAA;AAAAY;AAAAC;AAAA;AAAA,SAHA,CAIA;;AACA;AACA;AACAC,gCADA;AAEAC;AAFA;AAIA;;AACA;AACAD,8BADA;AAEAC;AAFA,SAXA,CAeA;;AACA,iCAhBA,CAiBA;;AACA;AAEA;AACA,KA3EA;;AA4EA;AACA;AACAQ;AACA;AACA;AACA;;AACAC;AACA,KAnFA;;AAoFA;AACAC;AACA;AACA,KAvFA;;AAwFA;AACA;AACA,uGADA,CAEA;AACA;AACA;;AACA,kCALA,CAMA;AACA;;AACA;AAAAzB;AAAA;AAAA0B;AAAA;;AACA;AACA;AACAZ,4BADA;AAEAC;AAFA;AAIA;;AACA;AACAD,0BADA;AAEAC;AAFA,SAfA,CAmBA;;AACA;AACA;AACA;;AA/GA;AAzBA","names":["data","token","roleList","rightsList","setRightDialogVisible","treeProps","label","children","deKeys","roleId","created","methods","headers","Authorization","message","center","confirmButtonText","cancelButtonText","type","catch","err","duration","role","getLeafKeys","node","setRightDialogClosed","rids"],"sourceRoot":"src/components/power","sources":["RolesV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 面包屑导航区域 -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item>\r\n      <el-breadcrumb-item>权限管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>角色列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 添加角色按钮区域 -->\r\n      <el-row>\r\n        <el-col>\r\n          <el-button type=\"primary\">添加角色</el-button>\r\n        </el-col>\r\n        <!-- 角色权限列表区域 -->\r\n        <el-table :data=\"roleList\" border stripe>\r\n          <!-- 展开列 -->\r\n          <el-table-column type=\"expand\">\r\n            <!-- 这是放一个插槽用于存放数据 -->\r\n            <template slot-scope=\"scope\">\r\n              <el-row :class=\"['bdBottom', i1 === 0 ? 'bdTop' : '', 'vcenter']\" v-for=\"(item1, i1) in scope.row.children\" :key=\"item1.id\">\r\n                <!-- 渲染一级权限 -->\r\n                <el-col :span=\"5\">\r\n                  <el-tag closable @close=\"removeRightById(scope.row, item1.id)\">\r\n                    {{ item1.authName }}\r\n                  </el-tag>\r\n                  <i class=\"el-icon-caret-right\"></i>\r\n                </el-col>\r\n                <!-- 渲染二，三级权限 -->\r\n                <el-col :span=\"19\">\r\n                  <!-- 通过for循环嵌套渲染二级权限  -->\r\n                  <el-row :class=\"[i2 === 0 ? '' : 'bdTop', 'vcenter']\" v-for=\"(item2, i2) in item1.children\" :key=\"item2.id\">\r\n                    <el-col :span=\"6\">\r\n                      <el-tag type=\"success\" closable @close=\"removeRightById(scope.row, item2.id)\">{{ item2.authName }}</el-tag>\r\n                      <i class=\"el-icon-caret-right\"></i>\r\n                    </el-col>\r\n                    <!-- 三级权限 -->\r\n                    <el-col :span=\"18\">\r\n                      <el-tag type=\"warning\" v-for=\"item3 in item2.children\" :key=\"item3.id\" closable @close=\"removeRightById(scope.row, item3.id)\">\r\n                        {{ item3.authName }}\r\n                      </el-tag>\r\n                    </el-col>\r\n                  </el-row>\r\n                </el-col>\r\n              </el-row>\r\n            </template>\r\n          </el-table-column>\r\n          <!-- 索引列 -->\r\n          <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n          <el-table-column label=\"角色名称\" prop=\"roleName\"></el-table-column>\r\n          <el-table-column label=\"角色描述\" prop=\"roleDesc\"></el-table-column>\r\n          <el-table-column label=\"操作\" width=\"285px\">\r\n            <!-- 以插槽的形式放在这里 -->\r\n            <template slot-scope=\"scope\">\r\n              <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\">修改</el-button>\r\n              <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\">删除</el-button>\r\n              <el-button type=\"warning\" icon=\"el-icon-setting\" size=\"mini\" @click=\"showSetRightDialog(scope.row)\">分配权限</el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-row>\r\n    </el-card>\r\n    <!-- 分配权限的对话框 -->\r\n    <el-dialog title=\"分配权限\" :visible.sync=\"setRightDialogVisible\" width=\"50%\" @close=\"setRightDialogClosed\">\r\n      <!-- <span>这是一段信息</span> -->\r\n      <!-- 内容区域 -->\r\n      <el-tree :data=\"rightsList\" :props=\"treeProps\" show-checkbox node-key=\"id\" default-expand-all :default-checked-keys=\"deKeys\" ref=\"treeRef\"></el-tree>\r\n\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"setRightDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"allotRights\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import axios from 'axios'\r\nexport default {\r\n  data() {\r\n    const token = window.sessionStorage.getItem('token')\r\n    return {\r\n      token: token,\r\n      // 所有角色列表数据\r\n      roleList: [],\r\n      // 获取到的用户权限数据\r\n      rightsList: [],\r\n      // 控制分配权限对话框的显示与隐藏\r\n      setRightDialogVisible: false,\r\n      // 树形控件的属性绑定对象\r\n      treeProps: {\r\n        label: 'authName',\r\n        children: 'children',\r\n      },\r\n      // 默认选中的节点ID值数组\r\n      deKeys: [],\r\n      // 当前即将分配权限的角色Id\r\n      roleId: '',\r\n    }\r\n  },\r\n  created() {\r\n    this.getRolesList()\r\n  },\r\n  methods: {\r\n    // 获取所有角色列表\r\n    async getRolesList() {\r\n      const { data: res } = await this.$http.get('roles', { headers: { Authorization: this.token } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取角色列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      // alert('获取列表成功！')\r\n      this.roleList = res.data\r\n      // console.log(this.roleList)\r\n      // this.getRolesList = res.data\r\n      // console.log(this.getRolesList)\r\n    },\r\n    // 根据id删除对应的权限\r\n    async removeRightById(role, rightId) {\r\n      //弹窗提示是否要删除\r\n      const confimResult = await this.$confirm('此操作将永久删除该权限，是否继续', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }).catch((err) => err)\r\n      if (confimResult !== 'confirm') {\r\n        return this.$message.info({\r\n          message: '取消了删除!',\r\n          center: true,\r\n        })\r\n      }\r\n      // alert('确认了删除！')\r\n      // const Str = `roles/${role.id}/rights/${rightId}`\r\n      // const url = 'http://127.0.0.1:8888/api/private/v1' + `roles/${role.id}/rights/${rightId}`\r\n      // const url1 = `http://127.0.0.1:8888/api/private/v1/roles/${role.id}/rights/${rightId}`\r\n      // const { data: res } = await axios.delete(url1, { headers: { Authorization: this.token } })\r\n      const { data: res } = await this.$http.delete(`roles/${role.id}/rights/${rightId}`)\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除权限失败！',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除权限成功！',\r\n        center: true,\r\n        duration: 3000,\r\n      })\r\n      // 重新刷新权限列表\r\n      // this.getRolesList()\r\n      role.children = res.data\r\n    },\r\n    // 分配权限的对话框\r\n    async showSetRightDialog(role) {\r\n      this.roleId = role.id\r\n      // 获取所有权限的数据----呈树状图显示\r\n      const { data: res } = await this.$http.get('rights/tree', { headers: { Authorization: this.token } })\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取用户权限列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取用户权限列表成功！',\r\n        center: true,\r\n      })\r\n      // 用户权限列表获取成功之后，将获取到的数据存储到data中\r\n      this.rightsList = res.data\r\n      // 递归获取三级节点的Id\r\n      this.getLeafKeys(role, this.deKeys)\r\n      console.log(this.rightsList)\r\n      this.setRightDialogVisible = true\r\n    },\r\n    // 通过递归的形式，获取角色下所有的三级权限的\r\n    // id,并保持到deKeys数组中\r\n    getLeafKeys(node, arr) {\r\n      if (!node.children) {\r\n        return arr.push(node.id)\r\n      }\r\n      node.children.forEach((item) => this.getLeafKeys(item, arr))\r\n    },\r\n    // 监听分配权限对话框的关闭事件\r\n    setRightDialogClosed() {\r\n      this.deKeys = []\r\n    },\r\n    // 点击为角色分配权限\r\n    async allotRights() {\r\n      const key = [...this.$refs.treeRef.getCheckedKeys(), ...this.$refs.treeRef.getHalfCheckedKeys()]\r\n      // 获取选中和半选中的Id值\r\n      // console.log(key)\r\n      // 将数组转化为以逗号拼接的字符串\r\n      const IdStr = key.join(',')\r\n      // const url = `http://127.0.0.1:8888/api/private/v1/roles/${this.roleId}/rights`\r\n      // const { data: res } = await axios.post(url, { rids: IdStr }, { headers: { Authorization: this.token } })\r\n      const { data: res } = await this.$http.post(`roles/${this.roleId}/rights`, { rids: IdStr })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '分配权限失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '分配权限成功！',\r\n        center: true,\r\n      })\r\n      // 分配权限成功之后，需要重新渲染权限列表并且关闭当前分配权限对话框\r\n      this.getRolesList()\r\n      this.setRightDialogVisible = false\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.el-tag {\r\n  margin: 10px;\r\n}\r\n// 边框样式\r\n.bdTop {\r\n  border-top: 1px solid #eee;\r\n}\r\n.bdBottom {\r\n  border-bottom: 1px solid #eee;\r\n}\r\n// 垂直居中对齐\r\n.vcenter {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}