{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nimport _ from 'lodash';\nexport default {\n  data: function data() {\n    return {\n      // 需要合并的数据\n      options: {\n        title: {\n          text: '用户来源'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#E9EEF3'\n            }\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          boundaryGap: false\n        }],\n        yAxis: [{\n          type: 'value'\n        }]\n      }\n    };\n  },\n  created: function created() {},\n  // 此时的页面上的元素已经被渲染完毕\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var myChart, _yield$_this$$http$ge, res, result;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // 基于准备好的DOM,初始化echarts实例\n              myChart = echarts.init(document.getElementById('main')); // 准备数据和配置项\n\n              _context.next = 3;\n              return _this.$http.get('reports/type/1');\n\n            case 3:\n              _yield$_this$$http$ge = _context.sent;\n              res = _yield$_this$$http$ge.data;\n\n              if (!(res.meta.status !== 200)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _this.$message.error({\n                message: '获取折线图数据失败！',\n                center: true\n              }));\n\n            case 7:\n              // 指定图表的配置项和数据\n              result = _.merge(res.data, _this.options); // 展示数据\n\n              myChart.setOption(result);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  methods: {}\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACAA,MADA,kBACA;AACA;AACA;AACAC;AACAC;AACAC;AADA,SADA;AAIAC;AACAC,yBADA;AAEAC;AACAC,yBADA;AAEAC;AACAC;AADA;AAFA;AAFA,SAJA;AAaAC;AACAC,oBADA;AAEAC,qBAFA;AAGAC,sBAHA;AAIAC;AAJA,SAbA;AAmBAC,gBACA;AACAC;AADA,SADA,CAnBA;AAwBAC,gBACA;AACAV;AADA,SADA;AAxBA;AAFA;AAiCA,GAnCA;AAoCAW,SApCA,qBAoCA,EApCA;AAqCA;AACAC,SAtCA,qBAsCA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AACAC,qBAFA,GAEAC,6CAFA,EAGA;;AAHA;AAAA,qBAIA,iCAJA;;AAAA;AAAA;AAIAC,iBAJA,yBAIAtB,IAJA;;AAAA,oBAKAsB,uBALA;AAAA;AAAA;AAAA;;AAAA,+CAMA;AACAC,qCADA;AAEAC;AAFA,gBANA;;AAAA;AAYA;AACAC,oBAbA,GAaAC,gCAbA,EAcA;;AACAN;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,GAtDA;AAuDAO;AAvDA","names":["data","options","title","text","tooltip","trigger","axisPointer","type","label","backgroundColor","grid","left","right","bottom","containLabel","xAxis","boundaryGap","yAxis","created","mounted","myChart","echarts","res","message","center","result","_","methods"],"sourceRoot":"src/components/report","sources":["ReportV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- <p>数据报表组件</p> -->\r\n      <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>数据统计</el-breadcrumb-item>\r\n      <el-breadcrumb-item>数据报表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 2:为echarts准备一个具备大小宽高的DOM -->\r\n      <div id=\"main\" style=\"width:750px;height:400px\"></div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts'\r\nimport _ from 'lodash'\r\nexport default {\r\n  data(){\r\n    return{\r\n        // 需要合并的数据\r\n       options: {\r\n        title: {\r\n          text: '用户来源'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            label: {\r\n              backgroundColor: '#E9EEF3'\r\n            }\r\n          }\r\n        },\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '3%',\r\n          containLabel: true\r\n        },\r\n        xAxis: [\r\n          {\r\n            boundaryGap: false\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: 'value'\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created(){},\r\n  // 此时的页面上的元素已经被渲染完毕\r\n  async mounted(){\r\n    // 基于准备好的DOM,初始化echarts实例\r\n    var myChart=echarts.init(document.getElementById('main'))\r\n    // 准备数据和配置项\r\n    const {data:res}=await this.$http.get('reports/type/1')\r\n    if(res.meta.status!==200){\r\n      return this.$message.error({\r\n        message:'获取折线图数据失败！',\r\n        center:true\r\n      })\r\n    }\r\n\r\n      // 指定图表的配置项和数据\r\n   const result=  _.merge(res.data,this.options)\r\n      // 展示数据\r\n      myChart.setOption(result)\r\n  },\r\n  methods:{}\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  margin-top: 18px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}