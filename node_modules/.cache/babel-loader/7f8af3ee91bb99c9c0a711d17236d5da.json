{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      cateList: [],\n      // 级联选择框的配置对象\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      //级联选择框双向绑定到的数组\n      selectedCateKeys: [],\n      //  被激活的页签的名称\n      activeName: 'many',\n      // 动态参数数据\n      manyTabData: [],\n      // 静态参数数据\n      onlyTabData: [],\n      // 控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      editDialogVisible: false,\n      // 添加参数的表单数据对象\n      addForm: {\n        attr_name: ''\n      },\n      // 添加表单的验证规则对象\n      addFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      },\n      //----------------------\n      // 修改表单数据的对象\n      editForm: {},\n      // 修改表单数据的验证规则对象\n      editFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数的名称',\n          trigger: 'blur'\n        }]\n      } // // 控制按钮与文本框的切换显示\n      // inputVisible: false,\n      // // 文本框中输入的内容\n      // inputValue: '',\n\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取所有的商品分类列表\n    getCateList: function getCateList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('categories');\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error({\n                  message: '获取商品分类失败！',\n                  center: true\n                }));\n\n              case 6:\n                _this.cateList = res.data;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 级联选择框选中项变化，会触发这个函数\n    handleChange: function handleChange() {\n      // console.log(this.selectedCateKeys)\n      this.getParamsData();\n    },\n    // tab页签点击事件的处理函数\n    handleTabClick: function handleTabClick() {\n      console.log(this.activeName);\n      this.getParamsData();\n    },\n    // 获取参数的列表数据\n    getParamsData: function getParamsData() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this2.selectedCateKeys.length !== 3)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _this2.selectedCateKeys = [];\n                _this2.manyTabData = [];\n                _this2.onlyTabData = [];\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                _context2.next = 7;\n                return _this2.$http.get(\"categories/\".concat(_this2.cateId, \"/attributes\"), {\n                  params: {\n                    sel: _this2.activeName\n                  }\n                });\n\n              case 7:\n                _yield$_this2$$http$g = _context2.sent;\n                res = _yield$_this2$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error({\n                  message: '获取分类列表失败！',\n                  center: true\n                }));\n\n              case 11:\n                // alert('获取分类列表成功！')\n                res.data.forEach(function (item) {\n                  item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []; // 控制文本框的显示与隐藏\n\n                  item.inputVisible = false;\n                  item.inputValue = '';\n                });\n                console.log(res.data);\n\n                if (_this2.activeName === 'many') {\n                  _this2.manyTabData = res.data;\n                } else {\n                  _this2.onlyTabData = res.data;\n                }\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 监听对话框的关闭事件\n    addDialogClosed: function addDialogClosed() {\n      this.$refs.addFormRef.resetFields();\n    },\n    // 点击按钮，添加参数\n    addParams: function addParams() {\n      var _this3 = this;\n\n      this.$refs.addFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var _yield$_this3$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this3.$http.post(\"categories/\".concat(_this3.cateId, \"/attributes\"), {\n                    attr_name: _this3.addForm.attr_name,\n                    attr_sel: _this3.activeName\n                  });\n\n                case 4:\n                  _yield$_this3$$http$p = _context3.sent;\n                  res = _yield$_this3$$http$p.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this3.$message.error({\n                    message: '添加参数失败！',\n                    center: true\n                  }));\n\n                case 8:\n                  _this3.$message.success({\n                    message: '添加参数成功！',\n                    center: true\n                  }); // 关闭对话框\n\n\n                  _this3.addDialogVisible = false; // 重新刷新列表\n\n                  _this3.getParamsData();\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 点击显示修改的对话框\n    showEditDialog: function showEditDialog(attr_id) {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var _yield$_this4$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this4.$http.get(\"categories/\".concat(_this4.cateId, \"/attributes/\").concat(attr_id), {\n                  params: {\n                    attr_sel: _this4.activeName\n                  }\n                });\n\n              case 2:\n                _yield$_this4$$http$g = _context4.sent;\n                res = _yield$_this4$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _this4.$message.error({\n                  message: '获取参数信息失败！',\n                  center: true\n                }));\n\n              case 6:\n                _this4.$message.success({\n                  message: '获取参数信息成功！',\n                  center: true\n                });\n\n                _this4.editForm = res.data;\n                _this4.editDialogVisible = true;\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    editDialogClosed: function editDialogClosed() {\n      this.$refs.editFormRef.resetFields();\n    },\n    // 修改参数的函数\n    editParams: function editParams() {\n      var _this5 = this;\n\n      this.$refs.editFormRef.validate( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(valid) {\n          var _yield$_this5$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (valid) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 2:\n                  _context5.next = 4;\n                  return _this5.$http.put(\"categories/\".concat(_this5.cateId, \"/attributes/\").concat(_this5.editForm.attr_id), {\n                    attr_name: _this5.editForm.attr_name,\n                    attr_sel: _this5.activeName\n                  });\n\n                case 4:\n                  _yield$_this5$$http$p = _context5.sent;\n                  res = _yield$_this5$$http$p.data;\n                  console.log(res);\n\n                  if (!(res.meta.status !== 200)) {\n                    _context5.next = 9;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", _this5.$message.error({\n                    message: '修改参数失败！',\n                    center: true\n                  }));\n\n                case 9:\n                  _this5.$message.success({\n                    message: '修改参数成功！',\n                    center: true\n                  });\n\n                  _this5.getParamsData();\n\n                  _this5.editDialogVisible = false;\n\n                case 12:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    // 删除参数的函数\n    removeParams: function removeParams(attr_id) {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var confirmResult, _yield$_this6$$http$d, res;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _this6.$confirm('此操作将永久删除该参数，是否继续?', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context6.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _this6.$message.info({\n                  message: '已取消删除！',\n                  center: true\n                }));\n\n              case 5:\n                _context6.next = 7;\n                return _this6.$http.delete(\"categories/\".concat(_this6.cateId, \"/attributes/\").concat(attr_id));\n\n              case 7:\n                _yield$_this6$$http$d = _context6.sent;\n                res = _yield$_this6$$http$d.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", _this6.$message.error({\n                  message: '删除参数失败！',\n                  center: true\n                }));\n\n              case 11:\n                _this6.$message.success({\n                  message: '删除参数成功！',\n                  center: true\n                });\n\n                _this6.getParamsData();\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    // 文本框失去焦点或摁下enter会触发事件\n    handleInputConfirm: function handleInputConfirm(row) {\n      var _this7 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        var _yield$_this7$$http$p, res;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(row.inputValue.trim().length === 0)) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                row.inputValue = '';\n                row.inputVisible = false;\n                return _context7.abrupt(\"return\");\n\n              case 4:\n                // 如果合法就做后续的处理\n                row.attr_vals.push(row.inputValue.trim());\n                row.inputValue = '';\n                row.inputVisible = false; // 发起请求，保存这次操作\n\n                _context7.next = 9;\n                return _this7.$http.put(\"categories/\".concat(_this7.cateId, \"/attributes/\").concat(row.attr_id), {\n                  attr_name: row.attr_name,\n                  attr_sel: row.attr_sel,\n                  attr_vals: row.attr_vals.join(' ')\n                });\n\n              case 9:\n                _yield$_this7$$http$p = _context7.sent;\n                res = _yield$_this7$$http$p.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context7.next = 13;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", _this7.$message.error({\n                  message: '修改参数项失败！',\n                  center: true\n                }));\n\n              case 13:\n                _this7.$message.success({\n                  message: '修改参数项成功！',\n                  center: true\n                });\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n    // 点击按钮，展示文本输入框\n    showInput: function showInput(row) {\n      var _this8 = this;\n\n      // this.inputVisible = true\n      // 让文本框自动获得焦点\n      // $nextTick方法的作用：就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n      row.inputVisible = true;\n      this.$nextTick(function () {\n        _this8.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    // 删除对应的参数可选项\n    handleClose: function handleClose(i, row) {\n      var _this9 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        var _yield$_this9$$http$p, res;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                row.attr_vals.splice(i, 1);\n                _context8.next = 3;\n                return _this9.$http.put(\"categories/\".concat(_this9.cateId, \"/attributes/\").concat(row.attr_id), {\n                  attr_name: row.attr_name,\n                  attr_sel: row.attr_sel,\n                  attr_vals: row.attr_vals.join(' ')\n                });\n\n              case 3:\n                _yield$_this9$$http$p = _context8.sent;\n                res = _yield$_this9$$http$p.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", _this9.$message.error({\n                  message: '删除参数项失败！',\n                  center: true\n                }));\n\n              case 7:\n                _this9.$message.success({\n                  message: '删除参数项成功！',\n                  center: true\n                });\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    }\n  },\n  computed: {\n    // 如果按钮需要被禁用，则返回true,否则返回false\n    isBtnDisabled: function isBtnDisabled() {\n      return this.selectedCateKeys.length !== 3;\n    },\n    // 当前选中的三级分类的Id\n    cateId: function cateId() {\n      if (this.selectedCateKeys.length === 3) {\n        return this.selectedCateKeys[2];\n      }\n\n      return null;\n    },\n    titleText: function titleText() {\n      if (this.activeName === 'many') {\n        return '动态参数';\n      }\n\n      return '静态属性';\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["data","cateList","cateProps","value","label","children","selectedCateKeys","activeName","manyTabData","onlyTabData","addDialogVisible","editDialogVisible","addForm","attr_name","addFormRules","required","message","trigger","editForm","editFormRules","created","methods","getCateList","res","center","handleChange","handleTabClick","console","getParamsData","params","sel","item","addDialogClosed","addParams","valid","attr_sel","showEditDialog","attr_id","editDialogClosed","editParams","removeParams","confirmButtonText","cancelButtonText","type","catch","confirmResult","handleInputConfirm","row","attr_vals","showInput","handleClose","i","computed","isBtnDisabled","cateId","titleText"],"sourceRoot":"src/components/goods","sources":["ParamsV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- <p>这是参数组件</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <!-- <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item> -->\r\n      <el-breadcrumb-item>商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\r\n      <el-breadcrumb-item class=\"list\">分类参数</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 警告区域 -->\r\n      <el-alert title=\"注意:只允许为第三级分类设置相关参数!\" type=\"warning\" effect=\"dark\" :closable=\"false\" center show-icon> </el-alert>\r\n      <!-- 选择商品分类区域 -->\r\n      <el-row class=\"cat_opt\">\r\n        <el-col>\r\n          <span>选择商品分类:</span>\r\n          <!-- 选择商品分类的级联选择框 -->\r\n          <el-cascader expand-trigger=\"hover\" v-model=\"selectedCateKeys\" :options=\"cateList\" :props=\"cateProps\" @change=\"handleChange\"></el-cascader>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- tab页签区域 -->\r\n      <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\r\n        <!-- 添加动态参数的面板 -->\r\n        <el-tab-pane label=\"动态参数\" name=\"many\">\r\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible = true\">添加参数</el-button>\r\n          <!-- 动态参数表格 -->\r\n          <el-table :data=\"manyTabData\" border stripe>\r\n            <!-- 动态展开行 -->\r\n            <el-table-column type=\"expand\">\r\n              <!-- 循环渲染Tag标签 -->\r\n              <template slot-scope=\"scope\">\r\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{ item }}</el-tag>\r\n                <!-- Tag的输入文本框 -->\r\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\"> </el-input>\r\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">New Tag</el-button>\r\n              </template>\r\n            </el-table-column>\r\n            <!-- 索引列 -->\r\n            <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n            <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"showEditDialog(scope.row.attr_id)\">修改</el-button>\r\n                <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n\r\n        <!-- 添加静态属性的面板 -->\r\n        <el-tab-pane label=\"静态属性\" name=\"only\">\r\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\" @click=\"addDialogVisible = true\">添加属性</el-button>\r\n          <!-- 静态参数表格 -->\r\n          <el-table :data=\"onlyTabData\" border stripe>\r\n            <!-- 动态展开行 -->\r\n            <el-table-column type=\"expand\">\r\n              <template slot-scope=\"scope\">\r\n                <el-tag v-for=\"(item, i) in scope.row.attr_vals\" :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{ item }}</el-tag>\r\n                <!-- 静态添加参数标签 -->\r\n                <el-input class=\"input-new-tag\" v-if=\"scope.row.inputVisible\" v-model=\"scope.row.inputValue\" ref=\"saveTagInput\" size=\"small\" @keyup.enter.native=\"handleInputConfirm(scope.row)\" @blur=\"handleInputConfirm(scope.row)\"> </el-input>\r\n                <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">New Tag</el-button>\r\n              </template>\r\n            </el-table-column>\r\n            <!-- 索引列 -->\r\n            <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n            <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\r\n            <el-table-column label=\"操作\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" @click=\"showEditDialog(scope.row.attr_id)\">修改</el-button>\r\n                <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </el-tab-pane>\r\n      </el-tabs>\r\n      <!-- 添加参数的对话框 -->\r\n      <el-dialog :title=\"'添加' + titleText\" :visible.sync=\"addDialogVisible\" width=\"50%\" @close=\"addDialogClosed\">\r\n        <!-- <span>这是一段信息</span> -->\r\n        <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\">\r\n          <el-form-item :label=\"titleText\" prop=\"attr_name\">\r\n            <el-input v-model=\"addForm.attr_name\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"addDialogVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n      <!-- 显示修改的对话框 -->\r\n      <el-dialog :title=\"'修改' + titleText\" :visible.sync=\"editDialogVisible\" width=\"50%\" @close=\"editDialogClosed\">\r\n        <!-- <span>这是一段信息</span> -->\r\n        <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"100px\">\r\n          <el-form-item :label=\"titleText\" prop=\"attr_name\">\r\n            <el-input v-model=\"editForm.attr_name\"></el-input>\r\n          </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"editDialogVisible = false\">取 消</el-button>\r\n          <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\r\n        </span>\r\n      </el-dialog>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      cateList: [],\r\n      // 级联选择框的配置对象\r\n      cateProps: {\r\n        value: 'cat_id',\r\n        label: 'cat_name',\r\n        children: 'children',\r\n      },\r\n      //级联选择框双向绑定到的数组\r\n      selectedCateKeys: [],\r\n      //  被激活的页签的名称\r\n      activeName: 'many',\r\n      // 动态参数数据\r\n      manyTabData: [],\r\n      // 静态参数数据\r\n      onlyTabData: [],\r\n      // 控制添加对话框的显示与隐藏\r\n      addDialogVisible: false,\r\n      editDialogVisible: false,\r\n      // 添加参数的表单数据对象\r\n      addForm: {\r\n        attr_name: '',\r\n      },\r\n      // 添加表单的验证规则对象\r\n      addFormRules: {\r\n        attr_name: [{ required: true, message: '请输入参数名称', trigger: 'blur' }],\r\n      },\r\n      //----------------------\r\n      // 修改表单数据的对象\r\n      editForm: {},\r\n      // 修改表单数据的验证规则对象\r\n      editFormRules: {\r\n        attr_name: [{ required: true, message: '请输入参数的名称', trigger: 'blur' }],\r\n      },\r\n      // // 控制按钮与文本框的切换显示\r\n      // inputVisible: false,\r\n      // // 文本框中输入的内容\r\n      // inputValue: '',\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    // 获取所有的商品分类列表\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories')\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取商品分类失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.cateList = res.data\r\n    },\r\n    // 级联选择框选中项变化，会触发这个函数\r\n    handleChange() {\r\n      // console.log(this.selectedCateKeys)\r\n      this.getParamsData()\r\n    },\r\n    // tab页签点击事件的处理函数\r\n    handleTabClick() {\r\n      console.log(this.activeName)\r\n      this.getParamsData()\r\n    },\r\n    // 获取参数的列表数据\r\n    async getParamsData() {\r\n      // 证明选中的不是三级分类\r\n      if (this.selectedCateKeys.length !== 3) {\r\n        this.selectedCateKeys = []\r\n        this.manyTabData = []\r\n        this.onlyTabData = []\r\n        return\r\n      }\r\n      // 证明选中的是三级分类\r\n      // console.log(this.selectedCateKeys)\r\n      // 根据所选分类的Id,和当前所处的面板，获取对应的参数\r\n      const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, { params: { sel: this.activeName } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取分类列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      // alert('获取分类列表成功！')\r\n      res.data.forEach((item) => {\r\n        item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : []\r\n        // 控制文本框的显示与隐藏\r\n        item.inputVisible = false\r\n        item.inputValue = ''\r\n      })\r\n      console.log(res.data)\r\n      if (this.activeName === 'many') {\r\n        this.manyTabData = res.data\r\n      } else {\r\n        this.onlyTabData = res.data\r\n      }\r\n    },\r\n    // 监听对话框的关闭事件\r\n    addDialogClosed() {\r\n      this.$refs.addFormRef.resetFields()\r\n    },\r\n    // 点击按钮，添加参数\r\n    addParams() {\r\n      this.$refs.addFormRef.validate(async (valid) => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.post(`categories/${this.cateId}/attributes`, {\r\n          attr_name: this.addForm.attr_name,\r\n          attr_sel: this.activeName,\r\n        })\r\n        // console.log(res)\r\n        if (res.meta.status !== 201) {\r\n          return this.$message.error({\r\n            message: '添加参数失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '添加参数成功！',\r\n          center: true,\r\n        })\r\n        // 关闭对话框\r\n        this.addDialogVisible = false\r\n        // 重新刷新列表\r\n        this.getParamsData()\r\n      })\r\n    },\r\n    // 点击显示修改的对话框\r\n    async showEditDialog(attr_id) {\r\n      const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes/${attr_id}`, {\r\n        params: {\r\n          attr_sel: this.activeName,\r\n        },\r\n      })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取参数信息失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取参数信息成功！',\r\n        center: true,\r\n      })\r\n      this.editForm = res.data\r\n      this.editDialogVisible = true\r\n    },\r\n    editDialogClosed() {\r\n      this.$refs.editFormRef.resetFields()\r\n    },\r\n    // 修改参数的函数\r\n    editParams() {\r\n      this.$refs.editFormRef.validate(async (valid) => {\r\n        if (!valid) return\r\n        const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${this.editForm.attr_id}`, {\r\n          attr_name: this.editForm.attr_name,\r\n          attr_sel: this.activeName,\r\n        })\r\n        console.log(res)\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error({\r\n            message: '修改参数失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '修改参数成功！',\r\n          center: true,\r\n        })\r\n        this.getParamsData()\r\n        this.editDialogVisible = false\r\n      })\r\n    },\r\n    // 删除参数的函数\r\n    async removeParams(attr_id) {\r\n      // 警告提示\r\n      const confirmResult = await this.$confirm('此操作将永久删除该参数，是否继续?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }).catch((err) => err)\r\n      // 用户取消了删除的操作\r\n      if (confirmResult !== 'confirm') {\r\n        return this.$message.info({\r\n          message: '已取消删除！',\r\n          center: true,\r\n        })\r\n      }\r\n      // 删除的业务逻辑\r\n      const { data: res } = await this.$http.delete(`categories/${this.cateId}/attributes/${attr_id}`)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除参数失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除参数成功！',\r\n        center: true,\r\n      })\r\n      this.getParamsData()\r\n    },\r\n    // 文本框失去焦点或摁下enter会触发事件\r\n    async handleInputConfirm(row) {\r\n      // console.log('OK')\r\n      // 先判断tag中的内容是否合法，然后再做后续处理\r\n      if (row.inputValue.trim().length === 0) {\r\n        row.inputValue = ''\r\n        row.inputVisible = false\r\n        return\r\n      }\r\n      // 如果合法就做后续的处理\r\n      row.attr_vals.push(row.inputValue.trim())\r\n      row.inputValue = ''\r\n      row.inputVisible = false\r\n      // 发起请求，保存这次操作\r\n      const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`, {\r\n        attr_name: row.attr_name,\r\n        attr_sel: row.attr_sel,\r\n        attr_vals: row.attr_vals.join(' '),\r\n      })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '修改参数项失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '修改参数项成功！',\r\n        center: true,\r\n      })\r\n    },\r\n    // 点击按钮，展示文本输入框\r\n    showInput(row) {\r\n      // this.inputVisible = true\r\n      // 让文本框自动获得焦点\r\n      // $nextTick方法的作用：就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\r\n      row.inputVisible = true\r\n      this.$nextTick(() => {\r\n        this.$refs.saveTagInput.$refs.input.focus()\r\n      })\r\n    },\r\n    // 删除对应的参数可选项\r\n    async handleClose(i, row) {\r\n      row.attr_vals.splice(i, 1)\r\n      const { data: res } = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`, {\r\n        attr_name: row.attr_name,\r\n        attr_sel: row.attr_sel,\r\n        attr_vals: row.attr_vals.join(' '),\r\n      })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '删除参数项失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '删除参数项成功！',\r\n        center: true,\r\n      })\r\n    },\r\n  },\r\n  computed: {\r\n    // 如果按钮需要被禁用，则返回true,否则返回false\r\n    isBtnDisabled() {\r\n      return this.selectedCateKeys.length !== 3\r\n    },\r\n    // 当前选中的三级分类的Id\r\n    cateId() {\r\n      if (this.selectedCateKeys.length === 3) {\r\n        return this.selectedCateKeys[2]\r\n      }\r\n      return null\r\n    },\r\n    titleText() {\r\n      if (this.activeName === 'many') {\r\n        return '动态参数'\r\n      }\r\n      return '静态属性'\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  margin-top: 18px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n/deep/.list {\r\n  color: red;\r\n  font-size: 18px;\r\n  font-family: kaiti;\r\n  font-weight: 600;\r\n  background-color: rgba(255, 255, 255, 0.308);\r\n}\r\n.cat_opt {\r\n  margin: 18px 0;\r\n}\r\n.input-new-tag {\r\n  width: 120px;\r\n}\r\n.el-tag {\r\n  margin-left: 10px;\r\n}\r\n.el-button--small {\r\n  margin-left: 10px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}