{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nexport default {\n  data: function data() {\n    var token = window.sessionStorage.getItem('token'); // 验证邮箱的规则\n    // const checkEmail = (rule, value, callback) => {\n    //   //验证邮箱的正则表达式\n    //   const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/\n    //   if (regEmail.test(value)) {\n    //     return callback()\n    //   }\n    //   callback(\n    //     this.$message.error({\n    //       message: '请输入合法的邮箱',\n    //       center: true,\n    //       duration: 3000,\n    //     })\n    //   )\n    // }\n    // 验证手机号的规则\n\n    var checkMobile = function checkMobile(rule, value, callback) {\n      var regMobile = /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$/;\n\n      if (regMobile.test(value)) {\n        return callback();\n      }\n\n      callback(new Error('请输入合法的手机号码!'));\n    };\n\n    return {\n      // 获取用户列表的参数对象\n      queryInfo: {\n        query: '',\n        pagenum: 1,\n        pagesize: 2 // 每页显示的条数\n\n      },\n      token: token,\n      // 保存请求回来的用户列表数据\n      userList: [],\n      total: 0,\n      // 控制添加用户对话框的显示与隐藏\n      addDialogVisible: false,\n      // 添加用户的表单数据\n      addForm: {\n        username: '',\n        password: '',\n        email: '',\n        mobile: ''\n      },\n      // 添加用户的验证规则对象\n      addFormRules: {\n        username: [{\n          required: true,\n          message: '用户名不能为空!',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '用户名的长度为3到10位字符之间！',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '密码不能为空!',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '密码的长度为3到10位字符之间！',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: '邮箱不能为空!',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱地址',\n          trigger: ['blur', 'change']\n        }],\n        mobile: [{\n          required: true,\n          message: '手机号不能为空!',\n          trigger: 'blur'\n        }, {\n          validator: checkMobile,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getUserList();\n  },\n  methods: {\n    // async getUserList() {\n    //   const { data: res } = await axios.get('http://127.0.0.1:8888/api/private/v1/users', {\n    //     params: this.queryInfo,\n    //   })\n    //   console.log(res)\n    // },\n    getUserList: function getUserList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$axios$get, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get('http://127.0.0.1:8888/api/private/v1/users', {\n                  headers: {\n                    Authorization: _this.token\n                  },\n                  params: _this.queryInfo\n                });\n\n              case 2:\n                _yield$axios$get = _context.sent;\n                res = _yield$axios$get.data;\n                console.log(res);\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取用户列表失败！'));\n\n              case 7:\n                //返回状态正常，将请求的数据保存在data中\n                _this.userList = res.data.users;\n                _this.total = res.data.total;\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 监听pagesize改变的事件\n    handleSizeChange: function handleSizeChange(newSize) {\n      this.queryInfo.pagesize = newSize;\n      this.getUserList();\n    },\n    // 监听页码值改变的事件\n    handleCurrentChange: function handleCurrentChange(newPage) {\n      this.queryInfo.pagenum = newPage;\n      this.getUserList();\n    },\n    // 监听switch开关的状态改变\n    userState: function userState(userinfo) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$axios$post, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.post('http://127.0.0.1:8888/api/private/v1/users/\"' + \"users/\".concat(userinfo.id, \"/state/\").concat(userinfo.mg_state) + '\"', {\n                  headers: {\n                    Authorization: _this2.token\n                  }\n                });\n\n              case 2:\n                _yield$axios$post = _context2.sent;\n                res = _yield$axios$post.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                userinfo.mg_state = !userinfo.mg_state;\n                return _context2.abrupt(\"return\", _this2.$message.error('更新用户状态失败！'));\n\n              case 7:\n                _this2.$$message.success('更新用户状态成功！');\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 监听添加用户对话框的关闭事件\n    addDialogClosed: function addDialogClosed() {\n      this.$refs.addFormRef.resetFields();\n    },\n    //点击确定按钮，添加新用户\n    addUser: function addUser() {\n      var _this3 = this;\n\n      this.$refs.addFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          var _yield$axios$post2, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return axios.post('http://127.0.0.1:8888/api/private/v1/users', {\n                    headers: {\n                      Authorization: _this3.token\n                    }\n                  }, _this3.addForm);\n\n                case 4:\n                  _yield$axios$post2 = _context3.sent;\n                  res = _yield$axios$post2.data;\n                  console.log('0000000000000000000');\n                  console.log(res);\n                  console.log('0000000000000000000');\n\n                  if (res.meta.status !== 201) {\n                    // this.$message.error({\n                    //   message: '添加用户失败！',\n                    //   center: true,\n                    //   duration: 3000,\n                    // })\n                    _this3.$message.error('添加用户失败！');\n                  } // this.$message.success({\n                  //   message: '添加用户成功！',\n                  //   center: true,\n                  //   duration: 3000,\n                  // })\n\n\n                  _this3.$message.error('添加用户成功！');\n\n                  console.log('--------------------------');\n                  console.log(res);\n                  console.log('---------------------'); // 隐藏添加用户的对话框\n\n                  _this3.addDialogVisible = false; // 重新获取用户列表的数据\n\n                  _this3.getUserList();\n\n                case 16:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["data","callback","queryInfo","query","pagenum","pagesize","token","userList","total","addDialogVisible","addForm","username","password","email","mobile","addFormRules","required","message","trigger","min","max","type","validator","created","methods","getUserList","axios","headers","Authorization","params","res","console","handleSizeChange","newSize","handleCurrentChange","newPage","userState","userinfo","addDialogClosed","addUser","valid"],"sourceRoot":"src/components/user","sources":["userV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- <p>这是user页面</p> -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 搜索框，按钮区域 -->\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"7\">\r\n          <!-- input输入框区域 -->\r\n          <el-input placeholder=\"请输入内容\" v-model=\"queryInfo.query\" clearable @clear=\"getUserList\">\r\n            <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"getUserList\"></el-button>\r\n          </el-input>\r\n        </el-col>\r\n        <el-col :span=\"7\">\r\n          <el-button type=\"primary\" @click=\"addDialogVisible = true\">添加用户</el-button>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- 用户列表区域 -->\r\n      <el-table :data=\"userList\" border stripe>\r\n        <el-table-column type=\"index\" label=\"#\"></el-table-column>\r\n        <el-table-column label=\"姓名\" prop=\"username\"></el-table-column>\r\n        <el-table-column label=\"邮箱\" prop=\"email\"></el-table-column>\r\n        <el-table-column label=\"电话\" prop=\"mobile\"></el-table-column>\r\n        <el-table-column label=\"身份\" prop=\"role_name\"></el-table-column>\r\n        <el-table-column label=\"状态\">\r\n          <template slot-scope=\"scope\">\r\n            <el-switch v-model=\"scope.row.mg_state\" active-color=\"#13ce66\" @change=\"userState(scope.row)\"></el-switch>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template width=\"180px\">\r\n            <!-- 修改按钮 -->\r\n            <el-tooltip effect=\"dark\" content=\"修改\" placement=\"top\" :enterable=\"false\">\r\n              <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\"></el-button>\r\n            </el-tooltip>\r\n\r\n            <!-- 删除按钮 -->\r\n            <el-tooltip effect=\"dark\" content=\"删除\" placement=\"top\" :enterable=\"false\">\r\n              <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\"></el-button>\r\n            </el-tooltip>\r\n\r\n            <!-- 分配角色按钮 -->\r\n            <el-tooltip effect=\"dark\" content=\"分配角色\" placement=\"top\" :enterable=\"false\">\r\n              <el-button type=\"warning\" icon=\"el-icon-setting\" size=\"mini\"></el-button>\r\n            </el-tooltip>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      <!-- 分页区域 -->\r\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"queryInfo.pagenum\" :page-sizes=\"[1, 5, 10, 15]\" :page-size=\"queryInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\"> </el-pagination>\r\n    </el-card>\r\n    <!-- 添加用户的对话框 -->\r\n    <el-dialog title=\"添加用户\" :visible.sync=\"addDialogVisible\" width=\"30%\" @close=\"addDialogClosed\">\r\n      <!-- 内容主题区域 -->\r\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"70px\">\r\n        <el-form-item label=\"用户名\" prop=\"username\">\r\n          <el-input v-model=\"addForm.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input v-model=\"addForm.password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"email\" label=\"邮箱\">\r\n          <el-input v-model=\"addForm.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"手机号\" prop=\"mobile\">\r\n          <el-input v-model=\"addForm.mobile\" maxlength=\"11\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <!-- 底部区域 -->\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addUser\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n  data() {\r\n    const token = window.sessionStorage.getItem('token')\r\n    // 验证邮箱的规则\r\n    // const checkEmail = (rule, value, callback) => {\r\n    //   //验证邮箱的正则表达式\r\n    //   const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/\r\n    //   if (regEmail.test(value)) {\r\n    //     return callback()\r\n    //   }\r\n    //   callback(\r\n    //     this.$message.error({\r\n    //       message: '请输入合法的邮箱',\r\n    //       center: true,\r\n    //       duration: 3000,\r\n    //     })\r\n    //   )\r\n    // }\r\n    // 验证手机号的规则\r\n    const checkMobile = (rule, value, callback) => {\r\n      const regMobile = /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$/\r\n      if (regMobile.test(value)) {\r\n        return callback()\r\n      }\r\n      callback(new Error('请输入合法的手机号码!'))\r\n    }\r\n    return {\r\n      // 获取用户列表的参数对象\r\n      queryInfo: {\r\n        query: '',\r\n        pagenum: 1,\r\n        pagesize: 2, // 每页显示的条数\r\n      },\r\n      token: token,\r\n      // 保存请求回来的用户列表数据\r\n      userList: [],\r\n      total: 0,\r\n      // 控制添加用户对话框的显示与隐藏\r\n      addDialogVisible: false,\r\n      // 添加用户的表单数据\r\n      addForm: {\r\n        username: '',\r\n        password: '',\r\n        email: '',\r\n        mobile: '',\r\n      },\r\n      // 添加用户的验证规则对象\r\n      addFormRules: {\r\n        username: [\r\n          { required: true, message: '用户名不能为空!', trigger: 'blur' },\r\n          {\r\n            min: 3,\r\n            max: 10,\r\n            message: '用户名的长度为3到10位字符之间！',\r\n            trigger: 'blur',\r\n          },\r\n        ],\r\n        password: [\r\n          { required: true, message: '密码不能为空!', trigger: 'blur' },\r\n          {\r\n            min: 3,\r\n            max: 10,\r\n            message: '密码的长度为3到10位字符之间！',\r\n            trigger: 'blur',\r\n          },\r\n        ],\r\n        email: [\r\n          { required: true, message: '邮箱不能为空!', trigger: 'blur' },\r\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] },\r\n        ],\r\n        mobile: [\r\n          { required: true, message: '手机号不能为空!', trigger: 'blur' },\r\n          { validator: checkMobile, trigger: 'blur' },\r\n        ],\r\n      },\r\n    }\r\n  },\r\n  created() {\r\n    this.getUserList()\r\n  },\r\n  methods: {\r\n    // async getUserList() {\r\n    //   const { data: res } = await axios.get('http://127.0.0.1:8888/api/private/v1/users', {\r\n    //     params: this.queryInfo,\r\n    //   })\r\n    //   console.log(res)\r\n    // },\r\n    async getUserList() {\r\n      const { data: res } = await axios.get('http://127.0.0.1:8888/api/private/v1/users', { headers: { Authorization: this.token }, params: this.queryInfo })\r\n      console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取用户列表失败！')\r\n      }\r\n      //返回状态正常，将请求的数据保存在data中\r\n      this.userList = res.data.users\r\n      this.total = res.data.total\r\n    },\r\n    // 监听pagesize改变的事件\r\n    handleSizeChange(newSize) {\r\n      this.queryInfo.pagesize = newSize\r\n      this.getUserList()\r\n    },\r\n    // 监听页码值改变的事件\r\n    handleCurrentChange(newPage) {\r\n      this.queryInfo.pagenum = newPage\r\n      this.getUserList()\r\n    },\r\n    // 监听switch开关的状态改变\r\n    async userState(userinfo) {\r\n      // console.log(userinfo)\r\n      const { data: res } = await axios.post('http://127.0.0.1:8888/api/private/v1/users/\"' + `users/${userinfo.id}/state/${userinfo.mg_state}` + '\"', { headers: { Authorization: this.token } })\r\n      if (res.meta.status !== 200) {\r\n        userinfo.mg_state = !userinfo.mg_state\r\n        return this.$message.error('更新用户状态失败！')\r\n      }\r\n      this.$$message.success('更新用户状态成功！')\r\n    },\r\n    // 监听添加用户对话框的关闭事件\r\n    addDialogClosed() {\r\n      this.$refs.addFormRef.resetFields()\r\n    },\r\n    //点击确定按钮，添加新用户\r\n    addUser() {\r\n      this.$refs.addFormRef.validate(async (valid) => {\r\n        // console.log(valid)\r\n        if (!valid) return\r\n        // 发起添加用户的网络请求\r\n        const { data: res } = await axios.post(\r\n          'http://127.0.0.1:8888/api/private/v1/users',\r\n          {\r\n            headers: { Authorization: this.token },\r\n          },\r\n          this.addForm\r\n        )\r\n        console.log('0000000000000000000')\r\n        console.log(res)\r\n        console.log('0000000000000000000')\r\n        if (res.meta.status !== 201) {\r\n          // this.$message.error({\r\n          //   message: '添加用户失败！',\r\n          //   center: true,\r\n          //   duration: 3000,\r\n          // })\r\n          this.$message.error('添加用户失败！')\r\n        }\r\n        // this.$message.success({\r\n        //   message: '添加用户成功！',\r\n        //   center: true,\r\n        //   duration: 3000,\r\n        // })\r\n        this.$message.error('添加用户成功！')\r\n        console.log('--------------------------')\r\n        console.log(res)\r\n        console.log('---------------------')\r\n        // 隐藏添加用户的对话框\r\n        this.addDialogVisible = false\r\n        // 重新获取用户列表的数据\r\n        this.getUserList()\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.el-table {\r\n  margin-top: 15px;\r\n  font-size: 15px;\r\n  font-family: cursive;\r\n  text-align: center;\r\n  line-height: 15px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}