{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'LoginV',\n  data: function data() {\n    var _this = this;\n\n    // 登录用户名不能为空\n    var validataUsername = function validataUsername(rule, value, callback) {\n      if (value.trim().length < 1) {\n        callback(new Error('用户名不能为空！-------------'));\n\n        _this.$message.error({\n          message: '用户名不能为空!',\n          center: true,\n          duration: 3000\n        });\n      } else {\n        callback();\n      }\n    }; // 登录密码不能为空\n\n\n    var validatePassword = function validatePassword(rule, value, callback) {\n      if (value.trim().length < 1) {\n        callback(new Error('密码不能为空！'));\n\n        _this.$message.error({\n          message: '密码不能为空!',\n          center: true,\n          duration: 3000\n        });\n      } else {\n        callback();\n      }\n    }; // 注册用户名不能为空\n    // 注册密码不能为空\n\n\n    return {\n      loginForm: {\n        username: '',\n        password: '' // checkPassword: \"\",\n\n      },\n      // 注册对象\n      reguserForm: {\n        username1: '',\n        password1: ''\n      },\n      // 验证规则对象\n      rules: {\n        password: [{\n          validator: validatePassword,\n          trigger: 'blur',\n          required: true\n        }, {\n          min: 3,\n          max: 10,\n          message: '长度在3到10个字符',\n          trigger: 'blur'\n        }],\n        // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\n        username: [{\n          validator: validataUsername,\n          required: true,\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '长度在3到10个字符',\n          trigger: 'blur'\n        }],\n        // 注册规则\n        reguserRules: {\n          password1: [{\n            validator: validatePassword,\n            trigger: 'blur',\n            required: true\n          }, {\n            min: 3,\n            max: 10,\n            message: '长度在3到10个字符',\n            trigger: 'blur'\n          }],\n          // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\n          username1: [{\n            validator: validataUsername,\n            required: true,\n            trigger: 'blur'\n          }, {\n            min: 3,\n            max: 10,\n            message: '长度在3到10个字符',\n            trigger: 'blur'\n          }]\n        }\n      },\n      showRegister: false\n    };\n  },\n  methods: {\n    // 用户登录函数，发送post请求给客户端\n    Login: function Login() {\n      var _this2 = this;\n\n      this.$refs.loginForm.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(valid) {\n          var _yield$_this2$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (valid) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 2:\n                  _context.next = 4;\n                  return _this2.$http.post('/api/login', _this2.loginForm);\n\n                case 4:\n                  _yield$_this2$$http$p = _context.sent;\n                  res = _yield$_this2$$http$p.data;\n\n                  // console.log(res);\n                  if (res.status === 0) {\n                    //  alert('登录成功!')\n                    _this2.$message.success({\n                      message: '登录成功!',\n                      center: true,\n                      duration: 1000\n                    });\n\n                    console.log(res); // 登录成功之后的token保存到客户端的sessionStorage中\n                    // 项目中出现了其它API的接口，必须在登录之后才能访问\n                    // token只在当前网站打开期间生效，token保存到sessionStorage中\n                    // expiresIn:'10h'\n\n                    window.sessionStorage.setItem('token', res.token);\n\n                    _this2.$router.push('/reguser'); // 登录成功之后，跳转到别的页面，然后清空数据\n\n\n                    _this2.$refs.loginForm.resetFields();\n                  } else {\n                    // alert(res.message)\n                    _this2.$message.error({\n                      message: res.message,\n                      center: true\n                    });\n\n                    console.log(res);\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 点击重置按钮，重置登录表单\n    resetForm: function resetForm() {\n      this.$refs.loginForm.resetFields();\n    },\n    showR: function showR() {\n      document.getElementById('forPop').style.display = 'block';\n      this.showRegister = true;\n    },\n    shutdown: function shutdown() {\n      // 关闭背景模块\n      document.getElementById('forPop').style.display = 'none'; // 关闭注册框\n\n      this.showRegister = false;\n    },\n    // 注册界面\n    reguser: function reguser() {\n      var res = this.$http.post('/api/reguser', {\n        username: this.loginForm.username,\n        password: this.loginForm.password\n      });\n      console.log(res);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACAA,gBADA;AAEAC,MAFA,kBAEA;AAAA;;AACA;AACA;AACA;AACAC;;AACA;AACAC,6BADA;AAEAC,sBAFA;AAGAC;AAHA;AAKA,OAPA,MAOA;AACAH;AACA;AACA,KAXA,CAFA,CAcA;;;AACA;AACA;AACAA;;AACA;AACAC,4BADA;AAEAC,sBAFA;AAGAC;AAHA;AAKA,OAPA,MAOA;AACAH;AACA;AACA,KAXA,CAfA,CA2BA;AAEA;;;AAEA;AACAI;AACAC,oBADA;AAEAC,oBAFA,CAGA;;AAHA,OADA;AAMA;AACAC;AACAC,qBADA;AAEAC;AAFA,OAPA;AAWA;AACAC;AACAJ,mBACA;AAAAK;AAAAC;AAAAC;AAAA,SADA,EAEA;AAAAC;AAAAC;AAAAd;AAAAW;AAAA,SAFA,CADA;AAKA;AACAP,mBACA;AAAAM;AAAAE;AAAAD;AAAA,SADA,EAEA;AAAAE;AAAAC;AAAAd;AAAAW;AAAA,SAFA,CANA;AAUA;AACAI;AACAP,sBACA;AAAAE;AAAAC;AAAAC;AAAA,WADA,EAEA;AAAAC;AAAAC;AAAAd;AAAAW;AAAA,WAFA,CADA;AAKA;AACAJ,sBACA;AAAAG;AAAAE;AAAAD;AAAA,WADA,EAEA;AAAAE;AAAAC;AAAAd;AAAAW;AAAA,WAFA;AANA;AAXA,OAZA;AAmCAK;AAnCA;AAqCA,GAtEA;AAuEAC;AACA;AACAC,SAFA,mBAEA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACAC,KADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,yBAGA,iDAHA;;AAAA;AAAA;AAGAC,qBAHA,yBAGAtB,IAHA;;AAIA;AACA;AACA;AACA;AACAE,sCADA;AAEAC,kCAFA;AAGAC;AAHA;;AAKAmB,qCAPA,CAQA;AACA;AACA;AACA;;AACAC;;AACA,oDAbA,CAcA;;;AACA;AACA,mBAhBA,MAgBA;AACA;AACA;AACAtB,0CADA;AAEAC;AAFA;;AAIAoB;AACA;;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA8BA,KAjCA;AAkCA;AACAE,aAnCA,uBAmCA;AACA;AACA,KArCA;AAsCAC,SAtCA,mBAsCA;AACAC;AACA;AACA,KAzCA;AA0CAC,YA1CA,sBA0CA;AACA;AACAD,+DAFA,CAGA;;AACA;AACA,KA/CA;AAgDA;AACAE,WAjDA,qBAiDA;AACA;AACAvB,yCADA;AAEAC;AAFA;AAIAgB;AACA;AAvDA;AAvEA","names":["name","data","callback","message","center","duration","loginForm","username","password","reguserForm","username1","password1","rules","validator","trigger","required","min","max","reguserRules","showRegister","methods","Login","valid","res","console","window","resetForm","showR","document","shutdown","reguser"],"sourceRoot":"src/components","sources":["LoginV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"login-box\">\r\n      <!-- 图像区域 -->\r\n      <div class=\"login-head\">\r\n        <img src=\"../assets/images/1-3.gif\" alt=\"\" />\r\n      </div>\r\n      <!-- 表单区域 -->\r\n      <el-form label-width=\"83px\" class=\"fm\" :model=\"loginForm\" status-icon :rules=\"rules\" ref=\"loginForm\" @submit.prevent.native=\"Login\">\r\n        <!-- 用户名 -->\r\n        <el-form-item label=\"用户名:\" prop=\"username\" class=\"item\">\r\n          <el-input prefix-icon=\"el-icon-user-solid\" v-model=\"loginForm.username\"></el-input>\r\n        </el-form-item>\r\n        <!-- 密码 -->\r\n        <el-form-item label=\"用户密码:\" class=\"psd\" prop=\"password\">\r\n          <el-input type=\"password\" prefix-icon=\"el-icon-lock\" show-password v-model=\"loginForm.password\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <!-- 确认密码\r\n        <el-form-item label=\"确认密码:\" prop=\"checkPassword\">\r\n          <el-input\r\n            type=\"passwordword\"\r\n            prefix-icon=\"el-icon-lock\"\r\n            show-passwordword\r\n            v-model=\"loginForm.checkPassword\"\r\n            autocomplete=\"off\"\r\n          ></el-input>\r\n        </el-form-item> -->\r\n        <!-- 按钮区域 -->\r\n        <el-form-item class=\"btn\">\r\n          <el-button type=\"primary\" plain class=\"btn1\" @click=\"Login\">登录</el-button>\r\n          <el-button type=\"primary\" plain class=\"btn2\" @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div class=\"sign\">Don't have an account?<button @click=\"showR\" class=\"signup\">Sign up</button></div>\r\n    </div>\r\n    <!-- 背景模块 -->\r\n    <div id=\"forPop\"></div>\r\n    <!-- // 点击显示注册弹窗 -->\r\n    <div v-if=\"showRegister\" class=\"registerPart\">\r\n      <!-- 头部部分 -->\r\n      <div class=\"head\">\r\n        <img src=\"../assets/images/02.png\" />\r\n        <p align=\"center\">Sign up to Vue</p>\r\n        <button @click=\"shutdown\" id=\"shutdown\">关闭</button>\r\n      </div>\r\n      <!-- 表单区域 -->\r\n      <div class=\"centent\">\r\n        <el-form :model=\"reguserForm\" status-icon :rules=\"reguserRules\" ref=\"reguserForm\" @submit.prevent.native=\"reguser\">\r\n          <!-- 用户名 -->\r\n          <div id=\"name\">Username --♥♥♥</div>\r\n          <el-form-item prop=\"username1\">\r\n            <el-input prefix-icon=\"el-icon-user-solid\" v-model=\"reguserForm.username1\" class=\"cen-ipt\" ref=\"username1\"></el-input>\r\n          </el-form-item>\r\n          <!-- 密码 -->\r\n          <div id=\"cen-psd\">Password --♥♥♥</div>\r\n          <el-form-item prop=\"password1\">\r\n            <el-input type=\"password\" prefix-icon=\"el-icon-lock\" show-password v-model=\"reguserForm.password1\" autocomplete=\"off\" class=\"ipt-psd\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item class=\"btn\">\r\n            <el-button type=\"primary\" plain class=\"regBtn\" @click=\"reguser\">Sign up</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n        <!-- 励志名言 -->\r\n        <div class=\"word\">The only way to become excellent is to be endlessly fascinated by doing the same thing over and over.You have to fall in love with boredom.</div>\r\n        <!-- 底部图片 -->\r\n        <!-- 结尾-start -->\r\n        <div class=\"banner\">\r\n          <div class=\"left\">\r\n            <img src=\"../assets/images/1-5.gif\" />\r\n          </div>\r\n          <div class=\"right\">\r\n            <img src=\"../assets/images/1-6.gif\" />\r\n          </div>\r\n        </div>\r\n        <!-- 结尾-end -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LoginV',\r\n  data() {\r\n    // 登录用户名不能为空\r\n    const validataUsername = (rule, value, callback) => {\r\n      if (value.trim().length < 1) {\r\n        callback(new Error('用户名不能为空！-------------'))\r\n        this.$message.error({\r\n          message: '用户名不能为空!',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    // 登录密码不能为空\r\n    const validatePassword = (rule, value, callback) => {\r\n      if (value.trim().length < 1) {\r\n        callback(new Error('密码不能为空！'))\r\n        this.$message.error({\r\n          message: '密码不能为空!',\r\n          center: true,\r\n          duration: 3000,\r\n        })\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    // 注册用户名不能为空\r\n\r\n    // 注册密码不能为空\r\n\r\n    return {\r\n      loginForm: {\r\n        username: '',\r\n        password: '',\r\n        // checkPassword: \"\",\r\n      },\r\n      // 注册对象\r\n      reguserForm: {\r\n        username1: '',\r\n        password1: '',\r\n      },\r\n      // 验证规则对象\r\n      rules: {\r\n        password: [\r\n          { validator: validatePassword, trigger: 'blur', required: true },\r\n          { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n        ],\r\n        // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\r\n        username: [\r\n          { validator: validataUsername, required: true, trigger: 'blur' },\r\n          { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n        ],\r\n        // 注册规则\r\n        reguserRules: {\r\n          password1: [\r\n            { validator: validatePassword, trigger: 'blur', required: true },\r\n            { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n          ],\r\n          // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\r\n          username1: [\r\n            { validator: validataUsername, required: true, trigger: 'blur' },\r\n            { min: 3, max: 10, message: '长度在3到10个字符', trigger: 'blur' },\r\n          ],\r\n        },\r\n      },\r\n      showRegister: false,\r\n    }\r\n  },\r\n  methods: {\r\n    // 用户登录函数，发送post请求给客户端\r\n    Login() {\r\n      this.$refs.loginForm.validate(async (valid) => {\r\n        if (!valid) return\r\n        // 解构赋值，返回值为promised,可以使用await和async\r\n        const { data: res } = await this.$http.post('/api/login', this.loginForm)\r\n        // console.log(res);\r\n        if (res.status === 0) {\r\n          //  alert('登录成功!')\r\n          this.$message.success({\r\n            message: '登录成功!',\r\n            center: true,\r\n            duration: 1000,\r\n          })\r\n          console.log(res)\r\n          // 登录成功之后的token保存到客户端的sessionStorage中\r\n          // 项目中出现了其它API的接口，必须在登录之后才能访问\r\n          // token只在当前网站打开期间生效，token保存到sessionStorage中\r\n          // expiresIn:'10h'\r\n          window.sessionStorage.setItem('token', res.token)\r\n          this.$router.push('/reguser')\r\n          // 登录成功之后，跳转到别的页面，然后清空数据\r\n          this.$refs.loginForm.resetFields()\r\n        } else {\r\n          // alert(res.message)\r\n          this.$message.error({\r\n            message: res.message,\r\n            center: true,\r\n          })\r\n          console.log(res)\r\n        }\r\n      })\r\n    },\r\n    // 点击重置按钮，重置登录表单\r\n    resetForm() {\r\n      this.$refs.loginForm.resetFields()\r\n    },\r\n    showR() {\r\n      document.getElementById('forPop').style.display = 'block'\r\n      this.showRegister = true\r\n    },\r\n    shutdown() {\r\n      // 关闭背景模块\r\n      document.getElementById('forPop').style.display = 'none'\r\n      // 关闭注册框\r\n      this.showRegister = false\r\n    },\r\n    // 注册界面\r\n    reguser() {\r\n      const res = this.$http.post('/api/reguser', {\r\n        username: this.loginForm.username,\r\n        password: this.loginForm.password,\r\n      })\r\n      console.log(res)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n#login-box {\r\n  width: 350px;\r\n  height: 250px;\r\n  background-color: #760102;\r\n  box-shadow: 0 0 10px #feb530;\r\n  border-radius: 10px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  // 移动transform\r\n  transform: translate(-50%, -50%);\r\n  .login-head {\r\n    position: absolute;\r\n    width: 100px;\r\n    height: 100px;\r\n    border: 2px solid #760102;\r\n    border-radius: 50%;\r\n    // margin-left: 120px;\r\n    // 将盒子居中显示\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    box-shadow: 0 0 30px #feb530;\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      // background-color:#2b3b6b;\r\n    }\r\n  }\r\n  // 表单样式\r\n  .el-form {\r\n    //  width: 60%;\r\n    margin-top: 81px;\r\n    border: 1px solid red;\r\n    border-bottom: none;\r\n    // 透明度\r\n    opacity: 0.91;\r\n    // 放大，缩小陪数\r\n    transform: scale(0.75, 0.75);\r\n    box-sizing: border-box;\r\n    box-shadow: 0 0 20px #feb530;\r\n  }\r\n  /deep/.el-form-item__label {\r\n    font-family: kaiti;\r\n    font-size: 13px;\r\n    color: cyan;\r\n  }\r\n  .btn {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  .btn1 {\r\n    // display: flex;;\r\n    flex: 1;\r\n    // padding-right: 30px;\r\n    // justify-content: flex-end;\r\n    margin-right: 50px;\r\n    font-size: 17px;\r\n    font-family: kaiti;\r\n    color: #760102;\r\n    border-radius: 10px;\r\n    box-shadow: #feb530;\r\n    background-color: #ff9933;\r\n  }\r\n  .btn2 {\r\n    flex: 1;\r\n    margin-right: 50px;\r\n    font-size: 17px;\r\n    font-family: kaiti;\r\n    color: #760102;\r\n    // opacity: 0.7\r\n    border-radius: 10px;\r\n    box-shadow: #feb530;\r\n    background-color: #161b22;\r\n  }\r\n  .sign {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    margin-bottom: 0px;\r\n    margin-left: 59px;\r\n    font-family: cursive;\r\n    .signup {\r\n      font-size: 16px;\r\n      border-radius: 10px;\r\n      margin-left: 7px;\r\n      background-color: rgba(255, 255, 255, 0.2);\r\n    }\r\n  }\r\n}\r\n// 弹出框中的信息模块\r\n.registerPart {\r\n  position: absolute;\r\n  width: 350px;\r\n  height: 600px;\r\n  top: 50%;\r\n  right: 0;\r\n  opacity: 0.91;\r\n  margin-top: -321px;\r\n  margin-right: 74px;\r\n  background-color: #760102;\r\n  box-shadow: 0 0 10px #feb530;\r\n  border: 1px solid red;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0 0 20px #feb530;\r\n  transform: scale(0.85, 0.85);\r\n  .head {\r\n    width: 150px;\r\n    height: 150px;\r\n    // border: 1px solid blue;\r\n    left: 50%;\r\n    transform: translate(65%);\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    p {\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      margin-top: -19px;\r\n    }\r\n    #shutdown {\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      font-size: 18px;\r\n      font-family: kaiti;\r\n      color: #760102;\r\n      margin-right: -100px;\r\n    }\r\n  }\r\n  .centent {\r\n    // position: relative;\r\n    width: 100%;\r\n    height: 300px;\r\n    margin-top: 20px;\r\n    background-color: #161b22;\r\n    #name {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      margin-top: 170px;\r\n    }\r\n    #cen-psd {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      margin-top: 249px;\r\n    }\r\n    .cen-ipt {\r\n      margin-top: 30px;\r\n    }\r\n    .ipt-psd {\r\n      margin-top: 18px;\r\n    }\r\n    .regBtn {\r\n      width: 100%;\r\n      font-size: 20px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n      text-align: center;\r\n      line-height: 20px;\r\n      background-color: #238636;\r\n    }\r\n    // 文字格言\r\n    .word {\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n      font-family: cursive;\r\n      color: #fff;\r\n    }\r\n    .banner {\r\n      display: flex;\r\n      height: 193px;\r\n      // transform: scale(0.6);\r\n      // margin-top: 5px;\r\n      border: 1px solid red;\r\n      justify-content: space-around;\r\n      .left {\r\n        flex: 1;\r\n        // width: 50%;\r\n        border: 1px solid yellow;\r\n        padding-left: -50px;\r\n        // transform: scale(0.6);\r\n        img {\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n      }\r\n      .right {\r\n        flex: 1;\r\n        // width: 50%;\r\n        border: 1px solid blue;\r\n        img {\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// 背景模块\r\n#forPop {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  opacity: 0.4;\r\n  background-color: #888888;\r\n  display: none;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}