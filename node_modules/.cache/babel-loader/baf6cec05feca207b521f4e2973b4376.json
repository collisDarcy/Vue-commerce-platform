{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      activeIndex: '0',\n      // 添加商品的表单数据对象\n      addForm: {\n        goods_name: '',\n        goods_price: '',\n        goods_weight: '',\n        goods_number: '',\n        goods_cat: []\n      },\n      addFormRules: {\n        goods_name: [{\n          required: true,\n          message: '请输入商品名称！',\n          trigger: 'blur'\n        }],\n        goods_price: [{\n          required: true,\n          message: '请输入商品价格！',\n          trigger: 'blur'\n        }],\n        goods_weight: [{\n          required: true,\n          message: '请输入商品重量！',\n          trigger: 'blur'\n        }],\n        goods_number: [{\n          required: true,\n          message: '请输入商品数量！',\n          trigger: 'blur'\n        }],\n        goods_cat: [{\n          required: true,\n          message: '请选择商品分类',\n          trigger: 'blur'\n        }]\n      },\n      // 商品分类列表\n      cateList: [],\n      // 级联选择器的配置对象\n      cateProps: {\n        label: 'cat_name',\n        value: 'cat_id',\n        children: 'children' // 父子节点的嵌套\n\n      },\n      // 动态参数列表数据\n      manyTableData: [],\n      // 静态属性列表数据\n      onlyTableData: []\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    getCateList: function getCateList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('categories');\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error({\n                  message: '获取商品分类列表失败！',\n                  center: true\n                }));\n\n              case 6:\n                _this.$message.success({\n                  message: '获取商品分类列表成功！',\n                  center: true\n                });\n\n                _this.cateList = res.data;\n                console.log(res.data);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 级联选择器选中项发生变化，会触发这个函数\n    handleChange: function handleChange() {\n      console.log(this.addForm.goods_cat); // 如果选中项不是第三类型，则清空选择器\n\n      if (this.addForm.goods_cat.length !== 3) {\n        return this.addForm.goods_cat = [];\n      }\n    },\n    //判断切换下一个tab时，是否符合规则\n    beforeTableLeave: function beforeTableLeave(activeName, oldActiveName) {\n      // console.log(activeName, oldActiveName)\n      if (this.addForm.goods_name === '' || this.addForm.goods_price === '' || this.addForm.goods_weight === '' || this.addForm.goods_number === '') {\n        this.$message.error({\n          message: '请填写完整的基本信息！',\n          center: true\n        });\n        return false;\n      } else if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\n        this.$message.error({\n          message: '请选择商品分类！',\n          center: true\n        });\n        return false;\n      }\n    },\n    tabClicked: function tabClicked() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$g, res, _yield$_this2$$http$g2, _res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this2.activeIndex === '1')) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _this2.$http.get(\"categories/\".concat(_this2.cateId, \"/attributes\"), {\n                  params: {\n                    sel: 'many'\n                  }\n                });\n\n              case 3:\n                _yield$_this2$$http$g = _context2.sent;\n                res = _yield$_this2$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error({\n                  message: '获取动态参数列表失败！',\n                  center: true\n                }));\n\n              case 7:\n                _this2.$message.success({\n                  message: '获取动态参数列表成功！',\n                  center: true\n                });\n\n                console.log(res.data); // 将res.data字符串转化为数组--forEach--split(' ')\n\n                res.data.forEach(function (item) {\n                  item.attr_vals = item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ');\n                });\n                _this2.manyTableData = res.data;\n                _context2.next = 23;\n                break;\n\n              case 13:\n                if (!(_this2.activeIndex === '2')) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                _context2.next = 16;\n                return _this2.$http.get(\"categories/\".concat(_this2.cateId, \"/attributes\"), {\n                  params: {\n                    sel: 'only'\n                  }\n                });\n\n              case 16:\n                _yield$_this2$$http$g2 = _context2.sent;\n                _res = _yield$_this2$$http$g2.data;\n\n                if (!(_res.meta.status !== 200)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error({\n                  message: '获取动态参数列表失败！',\n                  center: true\n                }));\n\n              case 20:\n                _this2.$message.success({\n                  message: '获取动态参数列表成功！',\n                  center: true\n                });\n\n                console.log(_res.data);\n                _this2.onlyTabData = _res.data;\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  },\n  computed: {\n    cateId: function cateId() {\n      if (this.addForm.goods_cat.length === 3) {\n        return this.addForm.goods_cat[2];\n      }\n\n      return null;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;AACAA,MADA,kBACA;AACA;AACAC,sBADA;AAEA;AACAC;AACAC,sBADA;AAEAC,uBAFA;AAGAC,wBAHA;AAIAC,wBAJA;AAKAC;AALA,OAHA;AAUAC;AACAL;AAAAM;AAAAC;AAAAC;AAAA,UADA;AAEAP;AAAAK;AAAAC;AAAAC;AAAA,UAFA;AAGAN;AAAAI;AAAAC;AAAAC;AAAA,UAHA;AAIAL;AAAAG;AAAAC;AAAAC;AAAA,UAJA;AAKAJ;AAAAE;AAAAC;AAAAC;AAAA;AALA,OAVA;AAiBA;AACAC,kBAlBA;AAmBA;AACAC;AACAC,yBADA;AAEAC,uBAFA;AAGAC,4BAHA,CAGA;;AAHA,OApBA;AAyBA;AACAC,uBA1BA;AA2BA;AACAC;AA5BA;AA8BA,GAhCA;AAiCAC,SAjCA,qBAiCA;AACA;AACA,GAnCA;AAoCAC;AACAC,eADA,yBACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,6BADA;;AAAA;AAAA;AACAC,mBADA,yBACAtB,IADA;;AAAA,sBAEAsB,uBAFA;AAAA;AAAA;AAAA;;AAAA,iDAGA;AACAZ,wCADA;AAEAa;AAFA,kBAHA;;AAAA;AAQA;AACAb,wCADA;AAEAa;AAFA;;AAIA;AACAC;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,KAfA;AAgBA;AACAC,gBAjBA,0BAiBA;AACAD,0CADA,CAEA;;AACA;AACA;AACA;AACA,KAvBA;AAwBA;AACAE,oBAzBA,4BAyBAC,UAzBA,EAyBAC,aAzBA,EAyBA;AACA;AACA;AACA;AACAlB,gCADA;AAEAa;AAFA;AAIA;AACA,OANA,MAMA;AACA;AACAb,6BADA;AAEAa;AAFA;AAIA;AACA;AACA,KAxCA;AAyCAM,cAzCA,wBAyCA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEA,0BAFA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGA;AACAC;AAAAC;AAAA;AADA,kBAHA;;AAAA;AAAA;AAGAT,mBAHA,yBAGAtB,IAHA;;AAAA,sBAMAsB,uBANA;AAAA;AAAA;AAAA;;AAAA,kDAOA;AACAZ,wCADA;AAEAa;AAFA,kBAPA;;AAAA;AAYA;AACAb,wCADA;AAEAa;AAFA;;AAIAC,sCAhBA,CAiBA;;AACAF;AACAU;AACA,iBAFA;AAGA;AArBA;AAAA;;AAAA;AAAA,sBAsBA,0BAtBA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAuBA;AACAF;AAAAC;AAAA;AADA,kBAvBA;;AAAA;AAAA;AAuBAT,oBAvBA,0BAuBAtB,IAvBA;;AAAA,sBA0BAsB,wBA1BA;AAAA;AAAA;AAAA;;AAAA,kDA2BA;AACAZ,wCADA;AAEAa;AAFA,kBA3BA;;AAAA;AAgCA;AACAb,wCADA;AAEAa;AAFA;;AAIAC;AACA;;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuCA;AAhFA,GApCA;AAsHAS;AACAC,UADA,oBACA;AACA;AACA;AACA;;AACA;AACA;AANA;AAtHA","names":["data","activeIndex","addForm","goods_name","goods_price","goods_weight","goods_number","goods_cat","addFormRules","required","message","trigger","cateList","cateProps","label","value","children","manyTableData","onlyTableData","created","methods","getCateList","res","center","console","handleChange","beforeTableLeave","activeName","oldActiveName","tabClicked","params","sel","item","computed","cateId"],"sourceRoot":"src/components/goods","sources":["AddV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- <p>添加商品组件</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <!-- <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item> -->\r\n      <el-breadcrumb-item class=\"list\">商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\r\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 提示区域 -->\r\n      <el-alert title=\"添加商品信息\" type=\"info\" center show-icon :closable=\"false\"></el-alert>\r\n      <!-- 步骤条区域 -->\r\n      <el-steps :space=\"200\" :active=\"activeIndex - 0\" finish-status=\"success\" align-center>\r\n        <el-step title=\"基本信息\"></el-step>\r\n        <el-step title=\"商品参数\"></el-step>\r\n        <el-step title=\"商品属性\"></el-step>\r\n        <el-step title=\"商品图片\"></el-step>\r\n        <el-step title=\"商品内容\"></el-step>\r\n        <el-step title=\"完成\"></el-step>\r\n      </el-steps>\r\n      <!-- tab栏区域 -->\r\n      <!-- 给属性一个固定的值需要用单引号包裹，因为是字符 -->\r\n      <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\" label-position=\"top\">\r\n        <el-tabs :tab-position=\"'left'\" v-model=\"activeIndex\" :before-leave=\"beforeTableLeave\" @tab-click=\"tabClicked\">\r\n          <el-tab-pane label=\"基本信息\" name=\"0\">\r\n            <el-form-item label=\"商品名称\" prop=\"goods_name\">\r\n              <el-input v-model=\"addForm.goods_name\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品价格\" prop=\"goods_price\">\r\n              <el-input v-model=\"addForm.goods_price\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品重量\" prop=\"goods_weight\">\r\n              <el-input v-model=\"addForm.goods_weight\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品数量\" prop=\"goods_number\">\r\n              <el-input v-model=\"addForm.goods_number\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <!-- 级联选择器 -->\r\n            <el-form-item label=\"商品分类\" prop=\"goods_cat\">\r\n              <el-cascader v-model=\"addForm.goods_cat\" :options=\"cateList\" :props=\"cateProps\" expand-trigger=\"hover\" @change=\"handleChange\"></el-cascader>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品参数\" name=\"1\">\r\n            <!-- 渲染表单的item项 -->\r\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in manyTableData\" :key=\"item.attr_id\">\r\n              <!-- 复选框组 -->\r\n              <el-checkbox-group v-model=\"item.attr_vals\">\r\n                <el-checkbox :label=\"call\" v-for=\"(call, i) in item.attr_vals\" :key=\"i\" border></el-checkbox>\r\n              </el-checkbox-group>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品属性\" name=\"2\">\r\n            <el-form-item :label=\"item.attr_name\" v-for=\"item in onlyTableData\" :key=\"item.attr_id\"></el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品图片\" name=\"3\">商品图片</el-tab-pane>\r\n          <el-tab-pane label=\"商品内容\" name=\"4\">商品内容</el-tab-pane>\r\n        </el-tabs>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeIndex: '0',\r\n      // 添加商品的表单数据对象\r\n      addForm: {\r\n        goods_name: '',\r\n        goods_price: '',\r\n        goods_weight: '',\r\n        goods_number: '',\r\n        goods_cat: [],\r\n      },\r\n      addFormRules: {\r\n        goods_name: [{ required: true, message: '请输入商品名称！', trigger: 'blur' }],\r\n        goods_price: [{ required: true, message: '请输入商品价格！', trigger: 'blur' }],\r\n        goods_weight: [{ required: true, message: '请输入商品重量！', trigger: 'blur' }],\r\n        goods_number: [{ required: true, message: '请输入商品数量！', trigger: 'blur' }],\r\n        goods_cat: [{ required: true, message: '请选择商品分类', trigger: 'blur' }],\r\n      },\r\n      // 商品分类列表\r\n      cateList: [],\r\n      // 级联选择器的配置对象\r\n      cateProps: {\r\n        label: 'cat_name',\r\n        value: 'cat_id',\r\n        children: 'children', // 父子节点的嵌套\r\n      },\r\n      // 动态参数列表数据\r\n      manyTableData: [],\r\n      // 静态属性列表数据\r\n      onlyTableData: [],\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories')\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取商品分类列表失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取商品分类列表成功！',\r\n        center: true,\r\n      })\r\n      this.cateList = res.data\r\n      console.log(res.data)\r\n    },\r\n    // 级联选择器选中项发生变化，会触发这个函数\r\n    handleChange() {\r\n      console.log(this.addForm.goods_cat)\r\n      // 如果选中项不是第三类型，则清空选择器\r\n      if (this.addForm.goods_cat.length !== 3) {\r\n        return (this.addForm.goods_cat = [])\r\n      }\r\n    },\r\n    //判断切换下一个tab时，是否符合规则\r\n    beforeTableLeave(activeName, oldActiveName) {\r\n      // console.log(activeName, oldActiveName)\r\n      if (this.addForm.goods_name === '' || this.addForm.goods_price === '' || this.addForm.goods_weight === '' || this.addForm.goods_number === '') {\r\n        this.$message.error({\r\n          message: '请填写完整的基本信息！',\r\n          center: true,\r\n        })\r\n        return false\r\n      } else if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\r\n        this.$message.error({\r\n          message: '请选择商品分类！',\r\n          center: true,\r\n        })\r\n        return false\r\n      }\r\n    },\r\n    async tabClicked() {\r\n      // console.log(this.activeIndex)\r\n      if (this.activeIndex === '1') {\r\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\r\n          params: { sel: 'many' },\r\n        })\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error({\r\n            message: '获取动态参数列表失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '获取动态参数列表成功！',\r\n          center: true,\r\n        })\r\n        console.log(res.data)\r\n        // 将res.data字符串转化为数组--forEach--split(' ')\r\n        res.data.forEach((item) => {\r\n          item.attr_vals = item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ')\r\n        })\r\n        this.manyTableData = res.data\r\n      } else if (this.activeIndex === '2') {\r\n        const { data: res } = await this.$http.get(`categories/${this.cateId}/attributes`, {\r\n          params: { sel: 'only' },\r\n        })\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error({\r\n            message: '获取动态参数列表失败！',\r\n            center: true,\r\n          })\r\n        }\r\n        this.$message.success({\r\n          message: '获取动态参数列表成功！',\r\n          center: true,\r\n        })\r\n        console.log(res.data)\r\n        this.onlyTabData = res.data\r\n      }\r\n    },\r\n  },\r\n  computed: {\r\n    cateId() {\r\n      if (this.addForm.goods_cat.length === 3) {\r\n        return this.addForm.goods_cat[2]\r\n      }\r\n      return null\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  margin-top: 18px;\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.el-steps {\r\n  margin: 15px 0;\r\n}\r\n.el-checkbox {\r\n  margin: 0 10px 0 0 !important;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}