{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nexport default {\n  data: function data() {\n    var token = window.sessionStorage.getItem('token');\n    return {\n      // 获取用户列表的参数对象\n      queryInfo: {\n        query: '',\n        pagenum: 1,\n        pagesize: 2 // 每页显示的条数\n\n      },\n      token: token,\n      // 保存请求回来的用户列表数据\n      userList: [],\n      total: 0\n    };\n  },\n  created: function created() {\n    this.getUserList();\n  },\n  methods: {\n    // async getUserList() {\n    //   const { data: res } = await axios.get('http://127.0.0.1:8888/api/private/v1/users', {\n    //     params: this.queryInfo,\n    //   })\n    //   console.log(res)\n    // },\n    getUserList: function getUserList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$axios$get, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get('http://127.0.0.1:8888/api/private/v1/users', {\n                  headers: {\n                    Authorization: _this.token\n                  },\n                  params: {\n                    query: '',\n                    pagenum: 1,\n                    pagesize: 2\n                  }\n                });\n\n              case 2:\n                _yield$axios$get = _context.sent;\n                res = _yield$axios$get.data;\n                console.log(res);\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error('获取用户列表失败！'));\n\n              case 7:\n                //返回状态正常，将请求的数据保存在data中\n                _this.userList = res.data.users;\n                _this.total = res.data.total;\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACAA,MADA,kBACA;AACA;AACA;AACA;AACAC;AACAC,iBADA;AAEAC,kBAFA;AAGAC,mBAHA,CAGA;;AAHA,OAFA;AAOAC,kBAPA;AAQA;AACAC,kBATA;AAUAC;AAVA;AAYA,GAfA;AAgBAC,SAhBA,qBAgBA;AACA;AACA,GAlBA;AAmBAC;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,eAPA,yBAOA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAC;AAAAC;AAAAC;AAAA;AAAAC;AAAAZ;AAAAC;AAAAC;AAAA;AAAA,kBADA;;AAAA;AAAA;AACAW,mBADA,oBACAf,IADA;AAEAgB;;AAFA,sBAGAD,uBAHA;AAAA;AAAA;AAAA;;AAAA,iDAIA,iCAJA;;AAAA;AAMA;AACA;AACA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAhBA;AAnBA","names":["data","queryInfo","query","pagenum","pagesize","token","userList","total","created","methods","getUserList","axios","headers","Authorization","params","res","console"],"sourceRoot":"src/components/user","sources":["userV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- <p>这是user页面</p> -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <!-- 搜索框，按钮区域 -->\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"7\">\r\n          <!-- input输入框区域 -->\r\n          <el-input placeholder=\"请输入内容\">\r\n            <el-button slot=\"append\" icon=\"el-icon-search\"></el-button>\r\n          </el-input>\r\n        </el-col>\r\n        <el-col :span=\"7\">\r\n          <el-button type=\"primary\">添加用户</el-button>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- 用户列表区域 -->\r\n      <el-table :data=\"userList\" border stripe>\r\n        <el-table-column label=\"姓名\" prop=\"username\"></el-table-column>\r\n        <el-table-column label=\"邮箱\" prop=\"email\"></el-table-column>\r\n        <el-table-column label=\"电话\" prop=\"mobile\"></el-table-column>\r\n        <el-table-column label=\"身份\" prop=\"role_name\"></el-table-column>\r\n        <el-table-column label=\"状态\" prop=\"mg_state\"></el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n  data() {\r\n    const token = window.sessionStorage.getItem('token')\r\n    return {\r\n      // 获取用户列表的参数对象\r\n      queryInfo: {\r\n        query: '',\r\n        pagenum: 1,\r\n        pagesize: 2, // 每页显示的条数\r\n      },\r\n      token: token,\r\n      // 保存请求回来的用户列表数据\r\n      userList: [],\r\n      total: 0,\r\n    }\r\n  },\r\n  created() {\r\n    this.getUserList()\r\n  },\r\n  methods: {\r\n    // async getUserList() {\r\n    //   const { data: res } = await axios.get('http://127.0.0.1:8888/api/private/v1/users', {\r\n    //     params: this.queryInfo,\r\n    //   })\r\n    //   console.log(res)\r\n    // },\r\n    async getUserList() {\r\n      const { data: res } = await axios.get('http://127.0.0.1:8888/api/private/v1/users', { headers: { Authorization: this.token }, params: { query: '', pagenum: 1, pagesize: 2 } })\r\n      console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error('获取用户列表失败！')\r\n      }\r\n      //返回状态正常，将请求的数据保存在data中\r\n      this.userList = res.data.users\r\n      this.total = res.data.total\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}