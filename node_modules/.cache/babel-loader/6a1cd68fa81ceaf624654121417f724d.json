{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { valid } from 'joi';\nexport default {\n  data: function data() {\n    return {\n      // 查询条件\n      queryInfo: {\n        type: 3,\n        pagenum: 1,\n        pagesize: 5\n      },\n      // 商品分类的数据列表，默认为空\n      cateList: [],\n      // 添加分类的表单数据对象\n      addCateForm: {\n        //将要添加的分类名称\n        cat_name: '',\n        // 父级分类的Id\n        cat_pid: 0,\n        // 分类的等级，默认要添加的是1级分类\n        cat_level: 0\n      },\n      // 添加分类表单的验证规则对象\n      addCateFormRules: {\n        cat_name: [{\n          required: true,\n          message: '请输入分类的名称',\n          trigger: 'blur'\n        }]\n      },\n      total: 0,\n      // 控制添加分类对话框的显示与隐藏\n      addCateDialogVisible: false,\n      // 存储获取到的数据\n      parentCateList: [],\n      // 指定级联选择器的配置对象\n      cascaderProps: {\n        value: 'cat_id',\n        //具体选中的值\n        label: 'cat_name',\n        // 名称\n        children: 'children',\n        //父子嵌套用的哪个属性\n        checkStrictly: true\n      },\n      // 选中的父级分类的Id数组\n      selectedKeys: [],\n      // 为table指定列的定义\n      columns: [{\n        label: '分类名称',\n        prop: 'cat_name'\n      }, // 模板列----使用插槽\n      {\n        label: '是否有效',\n        // 表示将当前列定义为模板列\n        type: 'template',\n        template: 'isOk'\n      }, {\n        label: '权限等级',\n        // 表示将当前列定义为模板列\n        type: 'template',\n        template: 'order'\n      }, {\n        label: '权限等级',\n        // 表示将当前列定义为模板列\n        type: 'template',\n        template: 'option'\n      }]\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    // 获取商品分类的数据\n    getCateList: function getCateList() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$_this$$http$ge, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$http.get('categories', {\n                  params: _this.queryInfo\n                });\n\n              case 2:\n                _yield$_this$$http$ge = _context.sent;\n                res = _yield$_this$$http$ge.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this.$message.error({\n                  message: '获取商品分类数据失败！',\n                  center: true\n                }));\n\n              case 6:\n                _this.$message.success({\n                  message: '获取商品分类数据成功！',\n                  center: true\n                }); // 把数据列表，赋值给cateList\n\n\n                _this.cateList = res.data.result;\n                _this.total = res.data.total;\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    // 监听pagesize的变化\n    handleSizeChange: function handleSizeChange(newSize) {\n      this.queryInfo.pagesize = newSize;\n      this.getCateList();\n    },\n    // 监听pagenum的变化\n    handleCurrentChange: function handleCurrentChange(newPage) {\n      this.queryInfo.pagenum = newPage;\n      this.getCateList();\n    },\n    // 添加分类对话框的显示与隐藏\n    showCateDialog: function showCateDialog() {\n      this.getParentCateList();\n      this.addCateDialogVisible = true;\n    },\n    // 获取父级分类的数据列表\n    getParentCateList: function getParentCateList() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$_this2$$http$g, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this2.$http.get('categories', {\n                  parmas: {\n                    type: 2\n                  }\n                });\n\n              case 2:\n                _yield$_this2$$http$g = _context2.sent;\n                res = _yield$_this2$$http$g.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _this2.$message.error({\n                  message: '获取父级分类数据失败！',\n                  center: true\n                }));\n\n              case 6:\n                _this2.parentCateList = res.data;\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    // 选择项发生变化触发这个函数\n    parentCateChanged: function parentCateChanged() {\n      console.log(this.selectedKeys); // 如果selectedKeys数组中的length大于0，证明选中的父级分类；\n      //反之，说明没有选中任何父级分类\n\n      if (this.selectedKeys.length > 0) {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1]; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = this.selectedKeys.length;\n        return;\n      } else {\n        // 父级分类的Id\n        this.addCateForm.cat_pid = 0; // 为当前分类的等级赋值\n\n        this.addCateForm.cat_level = 0;\n      }\n    },\n    addCate: function addCate() {\n      // 点击按钮，添加新的分类\n      // console.log(this.addCateForm)\n      this.$refs.addCateFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(valid) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 监听对话框关闭事件--重置表单数据\n    addCateDialogClosed: function addCateDialogClosed() {\n      this.$refs.addCateFormRef.resetFields();\n      this.selectedKeys = [];\n      this.addCateForm.cat_level = 0;\n      this.addCateForm.cat_pid = 0;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACAA,MADA,kBACA;AACA;AACA;AACAC;AACAC,eADA;AAEAC,kBAFA;AAGAC;AAHA,OAFA;AAQA;AACAC,kBATA;AAUA;AACAC;AACA;AACAC,oBAFA;AAGA;AACAC,kBAJA;AAKA;AACAC;AANA,OAXA;AAmBA;AACAC;AACAH;AAAAI;AAAAC;AAAAC;AAAA;AADA,OApBA;AAuBAC,cAvBA;AAwBA;AACAC,iCAzBA;AA0BA;AACAC,wBA3BA;AA4BA;AACAC;AACAC,uBADA;AACA;AACAC,yBAFA;AAEA;AACAC,4BAHA;AAGA;AACAC;AAJA,OA7BA;AAmCA;AACAC,sBApCA;AAqCA;AACAC,gBACA;AACAJ,qBADA;AAEAK;AAFA,OADA,EAKA;AACA;AACAL,qBADA;AAEA;AACAjB,wBAHA;AAIAuB;AAJA,OANA,EAYA;AACAN,qBADA;AAEA;AACAjB,wBAHA;AAIAuB;AAJA,OAZA,EAkBA;AACAN,qBADA;AAEA;AACAjB,wBAHA;AAIAuB;AAJA,OAlBA;AAtCA;AAgEA,GAlEA;AAmEAC,SAnEA,qBAmEA;AACA;AACA,GArEA;AAsEAC;AACA;AACAC,eAFA,yBAEA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA;AAAAC;AAAA,kBADA;;AAAA;AAAA;AACAC,mBADA,yBACA9B,IADA;;AAAA,sBAGA8B,uBAHA;AAAA;AAAA;AAAA;;AAAA,iDAIA;AACAlB,wCADA;AAEAmB;AAFA,kBAJA;;AAAA;AASA;AACAnB,wCADA;AAEAmB;AAFA,mBATA,CAaA;;;AACA;AACA;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,KAlBA;AAmBA;AACAC,oBApBA,4BAoBAC,OApBA,EAoBA;AACA;AACA;AACA,KAvBA;AAwBA;AACAC,uBAzBA,+BAyBAC,OAzBA,EAyBA;AACA;AACA;AACA,KA5BA;AA6BA;AACAC,kBA9BA,4BA8BA;AACA;AACA;AACA,KAjCA;AAkCA;AACAC,qBAnCA,+BAmCA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA;AAAAC;AAAApC;AAAA;AAAA,kBADA;;AAAA;AAAA;AACA4B,mBADA,yBACA9B,IADA;;AAAA,sBAEA8B,uBAFA;AAAA;AAAA;AAAA;;AAAA,kDAGA;AACAlB,wCADA;AAEAmB;AAFA,kBAHA;;AAAA;AAQA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,KA5CA;AA6CA;AACAQ,qBA9CA,+BA8CA;AACAC,qCADA,CAEA;AACA;;AACA;AACA;AACA,mFAFA,CAGA;;AACA;AACA;AACA,OANA,MAMA;AACA;AACA,qCAFA,CAGA;;AACA;AACA;AACA,KA9DA;AA+DAC,WA/DA,qBA+DA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACAC,KADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGA,KArEA;AAsEA;AACAC,uBAvEA,iCAuEA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAtEA","names":["data","queryInfo","type","pagenum","pagesize","cateList","addCateForm","cat_name","cat_pid","cat_level","addCateFormRules","required","message","trigger","total","addCateDialogVisible","parentCateList","cascaderProps","value","label","children","checkStrictly","selectedKeys","columns","prop","template","created","methods","getCateList","params","res","center","handleSizeChange","newSize","handleCurrentChange","newPage","showCateDialog","getParentCateList","parmas","parentCateChanged","console","addCate","valid","addCateDialogClosed"],"sourceRoot":"src/components/goods","sources":["CateV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- <p>这是goods组件</p> -->\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator=\"/\">\r\n      <el-breadcrumb-item :to=\"{ path: '/FirstPage' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item><a href=\"/\">用户登录</a></el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>分类参数</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品分类</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片视图区域 -->\r\n    <el-card>\r\n      <el-row>\r\n        <el-col>\r\n          <el-button type=\"primary\" @click=\"showCateDialog\">添加分类</el-button>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- 表格区域 -->\r\n      <tree-table :data=\"cateList\" :columns=\"columns\" :expand-type=\"false\" :selection-type=\"false\" show-index border class=\"treeTable\">\r\n        <!-- 是否有效 -->\r\n        <template slot=\"isOk\" slot-scope=\"scope\">\r\n          <i class=\"el-icon-success\" v-if=\"scope.row.cat_deleted === false\" style=\"color: lightgreen\"></i>\r\n          <i class=\"el-icon-error\" v-else style=\"color: red\"></i>\r\n        </template>\r\n        <!-- 权限等级 -->\r\n        <template slot=\"order\" slot-scope=\"scope\">\r\n          <el-tag size=\"mini\" v-if=\"scope.row.cat_level === 0\">一级</el-tag>\r\n          <el-tag size=\"mini\" type=\"success\" v-else-if=\"scope.row.cat_level === 1\">二级</el-tag>\r\n          <el-tag size=\"mini\" type=\"warning\" v-else>三级</el-tag>\r\n        </template>\r\n        <!-- 操作区域 -->\r\n        <template slot=\"option\" slot-scope=\"\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\">修改</el-button>\r\n          <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\">删除</el-button>\r\n        </template>\r\n      </tree-table>\r\n      <!-- 分页区域 -->\r\n      <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"queryInfo.pagenum\" :page-sizes=\"[5, 10, 20, 30]\" :page-size=\"queryInfo.pagesize\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\"> </el-pagination>\r\n    </el-card>\r\n    <!-- 添加分类的对话框区域 -->\r\n    <el-dialog title=\"添加分类\" :visible.sync=\"addCateDialogVisible\" width=\"30%\" :before-close=\"handleClose\" @close=\"addCateDialogClosed\">\r\n      <!-- <span>这是一段信息</span> -->\r\n      <!-- 添加分类对话框 -->\r\n      <el-form :model=\"addCateForm\" :rules=\"addCateFormRules\" ref=\"addCateFormRef\" label-width=\"100px\">\r\n        <el-form-item label=\"分类名称:\" prop=\"cat_name\">\r\n          <el-input v-model=\"addCateForm.cat_name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"父级分类:\">\r\n          <!-- options:用来指定数据源 -->\r\n          <!-- props:用来指定配置对象 -->\r\n          <el-cascader expand-trigger=\"hover\" v-model=\"selectedKeys\" :options=\"parentCateList\" @change=\"parentCateChanged\" :props=\"cascaderProps\" clearable></el-cascader>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"addCateDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addCate\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { valid } from 'joi'\r\nexport default {\r\n  data() {\r\n    return {\r\n      // 查询条件\r\n      queryInfo: {\r\n        type: 3,\r\n        pagenum: 1,\r\n        pagesize: 5,\r\n      },\r\n\r\n      // 商品分类的数据列表，默认为空\r\n      cateList: [],\r\n      // 添加分类的表单数据对象\r\n      addCateForm: {\r\n        //将要添加的分类名称\r\n        cat_name: '',\r\n        // 父级分类的Id\r\n        cat_pid: 0,\r\n        // 分类的等级，默认要添加的是1级分类\r\n        cat_level: 0,\r\n      },\r\n      // 添加分类表单的验证规则对象\r\n      addCateFormRules: {\r\n        cat_name: [{ required: true, message: '请输入分类的名称', trigger: 'blur' }],\r\n      },\r\n      total: 0,\r\n      // 控制添加分类对话框的显示与隐藏\r\n      addCateDialogVisible: false,\r\n      // 存储获取到的数据\r\n      parentCateList: [],\r\n      // 指定级联选择器的配置对象\r\n      cascaderProps: {\r\n        value: 'cat_id', //具体选中的值\r\n        label: 'cat_name', // 名称\r\n        children: 'children', //父子嵌套用的哪个属性\r\n        checkStrictly: true,\r\n      },\r\n      // 选中的父级分类的Id数组\r\n      selectedKeys: [],\r\n      // 为table指定列的定义\r\n      columns: [\r\n        {\r\n          label: '分类名称',\r\n          prop: 'cat_name',\r\n        },\r\n        // 模板列----使用插槽\r\n        {\r\n          label: '是否有效',\r\n          // 表示将当前列定义为模板列\r\n          type: 'template',\r\n          template: 'isOk',\r\n        },\r\n        {\r\n          label: '权限等级',\r\n          // 表示将当前列定义为模板列\r\n          type: 'template',\r\n          template: 'order',\r\n        },\r\n        {\r\n          label: '权限等级',\r\n          // 表示将当前列定义为模板列\r\n          type: 'template',\r\n          template: 'option',\r\n        },\r\n      ],\r\n    }\r\n  },\r\n  created() {\r\n    this.getCateList()\r\n  },\r\n  methods: {\r\n    // 获取商品分类的数据\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get('categories', { params: this.queryInfo })\r\n      // console.log(res)\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取商品分类数据失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.$message.success({\r\n        message: '获取商品分类数据成功！',\r\n        center: true,\r\n      })\r\n      // 把数据列表，赋值给cateList\r\n      this.cateList = res.data.result\r\n      this.total = res.data.total\r\n    },\r\n    // 监听pagesize的变化\r\n    handleSizeChange(newSize) {\r\n      this.queryInfo.pagesize = newSize\r\n      this.getCateList()\r\n    },\r\n    // 监听pagenum的变化\r\n    handleCurrentChange(newPage) {\r\n      this.queryInfo.pagenum = newPage\r\n      this.getCateList()\r\n    },\r\n    // 添加分类对话框的显示与隐藏\r\n    showCateDialog() {\r\n      this.getParentCateList()\r\n      this.addCateDialogVisible = true\r\n    },\r\n    // 获取父级分类的数据列表\r\n    async getParentCateList() {\r\n      const { data: res } = await this.$http.get('categories', { parmas: { type: 2 } })\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error({\r\n          message: '获取父级分类数据失败！',\r\n          center: true,\r\n        })\r\n      }\r\n      this.parentCateList = res.data\r\n    },\r\n    // 选择项发生变化触发这个函数\r\n    parentCateChanged() {\r\n      console.log(this.selectedKeys)\r\n      // 如果selectedKeys数组中的length大于0，证明选中的父级分类；\r\n      //反之，说明没有选中任何父级分类\r\n      if (this.selectedKeys.length > 0) {\r\n        // 父级分类的Id\r\n        this.addCateForm.cat_pid = this.selectedKeys[this.selectedKeys.length - 1]\r\n        // 为当前分类的等级赋值\r\n        this.addCateForm.cat_level = this.selectedKeys.length\r\n        return\r\n      } else {\r\n        // 父级分类的Id\r\n        this.addCateForm.cat_pid = 0\r\n        // 为当前分类的等级赋值\r\n        this.addCateForm.cat_level = 0\r\n      }\r\n    },\r\n    addCate() {\r\n      // 点击按钮，添加新的分类\r\n      // console.log(this.addCateForm)\r\n      this.$refs.addCateFormRef.validate(async (valid) => {\r\n        if (!valid) return\r\n      })\r\n    },\r\n    // 监听对话框关闭事件--重置表单数据\r\n    addCateDialogClosed() {\r\n      this.$refs.addCateFormRef.resetFields()\r\n      this.selectedKeys = []\r\n      this.addCateForm.cat_level = 0\r\n      this.addCateForm.cat_pid = 0\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-breadcrumb {\r\n  margin-bottom: 22px;\r\n  font-size: 17px;\r\n  font-family: cursive;\r\n}\r\n.el-card {\r\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);\r\n}\r\n.treeTable {\r\n  margin-top: 18px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}