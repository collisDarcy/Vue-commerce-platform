{"ast":null,"code":"import _asyncToGenerator from \"D:/vscode\\u7EC3\\u4E60\\u5305/Vue\\u7535\\u5546\\u9879\\u76EE\\u5B9E\\u6218/demo-vue2.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"LoginV\",\n  data: function data() {\n    var _this = this;\n\n    // 判断两次密码是否相同\n    var validatePassword = function validatePassword(rule, value, callback) {\n      if (value === \"\") {\n        callback(new Error(\"密码不能为空!\"));\n      }\n\n      if (value !== _this.loginForm.password) {\n        callback(new Error(\"密码输入错误!\"));\n      } else {\n        if (_this.loginForm.checkPassword !== \"\") {\n          _this.$refs.loginForm.validateField(\"checkPassword\");\n        }\n\n        callback();\n      }\n    }; // var validatePassword2 = (rule, value, callback) => {\n    //   if (value === \"\") {\n    //     callback(new Error(\"请再次输入密码\"));\n    //   } else if (value !== this.loginForm.password) {\n    //     callback(new Error(\"两次输入密码不一致!\"));\n    //   } else {\n    //     callback();\n    //   }\n    // };\n\n\n    return {\n      loginForm: {\n        username: \"\",\n        password: \"\" // checkPassword: \"\",\n\n      },\n      // 验证规则对象\n      rules: {\n        password: [{\n          validator: validatePassword,\n          trigger: \"blur\",\n          required: true\n        }, {\n          min: 3,\n          max: 10,\n          message: \"长度在3到10个字符\",\n          trigger: \"blur\"\n        }],\n        // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\n        username: [{\n          required: true,\n          message: \"请输入用户名！\",\n          trigger: \"blur\"\n        }, {\n          min: 3,\n          max: 10,\n          message: \"长度在3到10个字符\",\n          trigger: \"blur\"\n        }]\n      },\n      message: \"\"\n    };\n  },\n  methods: {\n    // 用户登录函数，发送post请求给客户端\n    Login: function Login() {\n      var _this2 = this;\n\n      this.$refs.loginForm.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(valid) {\n          var _yield$_this2$$http$p, res;\n\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (valid) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 2:\n                  _context.next = 4;\n                  return _this2.$http.post(\"/api/login\", _this2.loginForm);\n\n                case 4:\n                  _yield$_this2$$http$p = _context.sent;\n                  res = _yield$_this2$$http$p.data;\n\n                  // console.log(res);\n                  if (res.status === 0) {\n                    //  alert('登录成功!')\n                    _this2.$message.success({\n                      message: \"登录成功!\",\n                      center: true,\n                      duration: 1000\n                    });\n\n                    console.log(res); // 登录成功之后的token保存到客户端的sessionStorage中\n                    // 项目中出现了其它API的接口，必须在登录之后才能访问\n                    // token只在当前网站打开期间生效，token保存到sessionStorage中\n                    // expiresIn:'10h'\n\n                    window.sessionStorage.setItem(\"token\", res.token);\n\n                    _this2.$router.push(\"/reguser\"); // 登录成功之后，跳转到别的页面，然后清空数据\n\n\n                    _this2.$refs.loginForm.resetFields();\n                  } else {\n                    // alert(res.message)\n                    _this2.$message.error({\n                      message: res.message,\n                      center: true\n                    });\n\n                    console.log(res);\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 点击重置按钮，重置登录表单\n    resetForm: function resetForm() {\n      this.$refs.loginForm.resetFields();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACAA,gBADA;AAEAC,MAFA,kBAEA;AAAA;;AACA;AACA;AACA;AACAC;AACA;;AACA;AACAA;AACA,OAFA,MAEA;AACA;AACA;AACA;;AACAA;AACA;AACA,KAZA,CAFA,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAC;AACAC,oBADA;AAEAC,oBAFA,CAGA;;AAHA,OADA;AAMA;AACAC;AACAD,mBACA;AAAAE;AAAAC;AAAAC;AAAA,SADA,EAEA;AAAAC;AAAAC;AAAAC;AAAAJ;AAAA,SAFA,CADA;AAKA;AACAJ,mBACA;AAAAK;AAAAG;AAAAJ;AAAA,SADA,EAEA;AAAAE;AAAAC;AAAAC;AAAAJ;AAAA,SAFA;AANA,OAPA;AAkBAI;AAlBA;AAoBA,GA9CA;AA+CAC;AACA;AACAC,SAFA,mBAEA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACAC,KADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,yBAGA,kBACA,YADA,EAEA,gBAFA,CAHA;;AAAA;AAAA;AAGAC,qBAHA,yBAGAf,IAHA;;AAOA;AACA;AACA;AACA;AACAW,sCADA;AAEAK,kCAFA;AAGAC;AAHA;;AAKAC,qCAPA,CAQA;AACA;AACA;AACA;;AACAC;;AACA,oDAbA,CAcA;;;AACA;AACA,mBAhBA,MAgBA;AACA;AACA;AACAR,0CADA;AAEAK;AAFA;;AAIAE;AACA;;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiCA,KApCA;AAqCA;AACAE,aAtCA,uBAsCA;AACA;AACA;AAxCA;AA/CA","names":["name","data","callback","loginForm","username","password","rules","validator","trigger","required","min","max","message","methods","Login","valid","res","center","duration","console","window","resetForm"],"sourceRoot":"src/components","sources":["LoginV.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <p align=\"center\" style=\"font-size: 20px; color: red\">{{ message }}</p>\r\n    <div id=\"login-box\">\r\n      <!-- 图像区域 -->\r\n      <div class=\"login-head\">\r\n        <img src=\"../assets/02.gif\" alt=\"\" />\r\n      </div>\r\n      <!-- 表单区域 -->\r\n      <el-form\r\n        label-width=\"83px\"\r\n        class=\"fm\"\r\n        :model=\"loginForm\"\r\n        status-icon\r\n        :rules=\"rules\"\r\n        ref=\"loginForm\"\r\n        @submit.prevent.native=\"Login\"\r\n      >\r\n        <!-- 用户名 -->\r\n        <el-form-item label=\"用户名:\" prop=\"username\" class=\"item\">\r\n          <el-input\r\n            prefix-icon=\"el-icon-user-solid\"\r\n            v-model=\"loginForm.username\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <!-- 密码 -->\r\n        <el-form-item label=\"用户密码:\" class=\"psd\" prop=\"password\">\r\n          <el-input\r\n            type=\"password\"\r\n            prefix-icon=\"el-icon-lock\"\r\n            show-password\r\n            v-model=\"loginForm.password\"\r\n            autocomplete=\"off\"\r\n          ></el-input>\r\n        </el-form-item>\r\n        <!-- 确认密码\r\n        <el-form-item label=\"确认密码:\" prop=\"checkPassword\">\r\n          <el-input\r\n            type=\"passwordword\"\r\n            prefix-icon=\"el-icon-lock\"\r\n            show-passwordword\r\n            v-model=\"loginForm.checkPassword\"\r\n            autocomplete=\"off\"\r\n          ></el-input>\r\n        </el-form-item> -->\r\n        <!-- 按钮区域 -->\r\n        <el-form-item class=\"btn\">\r\n          <el-button type=\"primary\" plain class=\"btn1\" @click=\"Login\"\r\n            >登录</el-button\r\n          >\r\n          <el-button type=\"primary\" plain class=\"btn2\" @click=\"resetForm\"\r\n            >重置</el-button\r\n          >\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"LoginV\",\r\n  data() {\r\n    // 判断两次密码是否相同\r\n    var validatePassword = (rule, value, callback) => {\r\n      if (value === \"\") {\r\n        callback(new Error(\"密码不能为空!\"));\r\n      }\r\n      if (value !== this.loginForm.password) {\r\n        callback(new Error(\"密码输入错误!\"));\r\n      } else {\r\n        if (this.loginForm.checkPassword !== \"\") {\r\n          this.$refs.loginForm.validateField(\"checkPassword\");\r\n        }\r\n        callback();\r\n      }\r\n    };\r\n    // var validatePassword2 = (rule, value, callback) => {\r\n    //   if (value === \"\") {\r\n    //     callback(new Error(\"请再次输入密码\"));\r\n    //   } else if (value !== this.loginForm.password) {\r\n    //     callback(new Error(\"两次输入密码不一致!\"));\r\n    //   } else {\r\n    //     callback();\r\n    //   }\r\n    // };\r\n    return {\r\n      loginForm: {\r\n        username: \"\",\r\n        password: \"\",\r\n        // checkPassword: \"\",\r\n      },\r\n      // 验证规则对象\r\n      rules: {\r\n        password: [\r\n          { validator: validatePassword, trigger: \"blur\", required: true },\r\n          { min: 3, max: 10, message: \"长度在3到10个字符\", trigger: \"blur\" },\r\n        ],\r\n        // checkPassword: [{ validator: validatePassword2, trigger: \"blur\",required:true}],\r\n        username: [\r\n          { required: true, message: \"请输入用户名！\", trigger: \"blur\" },\r\n          { min: 3, max: 10, message: \"长度在3到10个字符\", trigger: \"blur\" },\r\n        ],\r\n      },\r\n      message: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    // 用户登录函数，发送post请求给客户端\r\n    Login() {\r\n      this.$refs.loginForm.validate(async (valid) => {\r\n        if (!valid) return;\r\n        // 解构赋值，返回值为promised,可以使用await和async\r\n        const { data: res } = await this.$http.post(\r\n          \"/api/login\",\r\n          this.loginForm\r\n        );\r\n        // console.log(res);\r\n        if (res.status === 0) {\r\n          //  alert('登录成功!')\r\n          this.$message.success({\r\n            message: \"登录成功!\",\r\n            center: true,\r\n            duration: 1000,\r\n          });\r\n          console.log(res);\r\n          // 登录成功之后的token保存到客户端的sessionStorage中\r\n          // 项目中出现了其它API的接口，必须在登录之后才能访问\r\n          // token只在当前网站打开期间生效，token保存到sessionStorage中\r\n          // expiresIn:'10h'\r\n          window.sessionStorage.setItem(\"token\", res.token);\r\n          this.$router.push(\"/reguser\");\r\n          // 登录成功之后，跳转到别的页面，然后清空数据\r\n          this.$refs.loginForm.resetFields();\r\n        } else {\r\n          // alert(res.message)\r\n          this.$message.error({\r\n            message: res.message,\r\n            center: true,\r\n          });\r\n          console.log(res);\r\n        }\r\n      });\r\n    },\r\n    // 点击重置按钮，重置登录表单\r\n    resetForm() {\r\n      this.$refs.loginForm.resetFields();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n#login-box {\r\n  width: 350px;\r\n  height: 250px;\r\n  background-color:#760102;\r\n  box-shadow: 0 0 10px #FEB530;\r\n  border-radius: 10px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  // 移动transform\r\n  transform: translate(-50%, -50%);\r\n  .login-head {\r\n    position: absolute;\r\n    width: 100px;\r\n    height: 100px;\r\n    border: 1px solid greenyellow;\r\n    border-radius: 50%;\r\n    // margin-left: 120px;\r\n    // 将盒子居中显示\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    box-shadow: 0 0 20px #FEB530;\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%;\r\n      // background-color:#2b3b6b;\r\n    }\r\n  }\r\n  // 表单样式\r\n  .el-form {\r\n    //  width: 60%;\r\n    margin-top: 105px;\r\n    border: 1px solid cyan;\r\n    border-bottom: none;\r\n    // 透明度\r\n    opacity: 0.91;\r\n    // 放大，缩小陪数\r\n    transform: scale(0.75, 0.75);\r\n    box-sizing: border-box;\r\n    box-shadow: 0 0 20px #FEB530;\r\n     /deep/ .fm .el-form-item_label{\r\n      color:cyan;\r\n    }\r\n    .item /deep/ .el-form-item_label{\r\n      color:red;\r\n    }\r\n  }\r\n  // /deep/.item .el-form-item_label{\r\n  //     color:cyan;\r\n  //   }\r\n  .btn {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  .btn1 {\r\n    // display: flex;;\r\n    flex: 1;\r\n    // padding-right: 30px;\r\n    // justify-content: flex-end;\r\n    margin-right: 50px;\r\n    background-color: red;\r\n  }\r\n  .btn2 {\r\n    flex: 1;\r\n    margin-right: 50px;\r\n    background-color: cyan;\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}